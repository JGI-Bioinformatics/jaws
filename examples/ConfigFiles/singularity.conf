# include the application.conf at the top
include required(classpath("application"))

docker {
    hash-lookup {
      enabled = false
    }
}

include required(classpath("application"))

backend {
    default: singularity
    providers: {
        singularity {
            # The backend custom configuration.
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

            config {
                run-in-background = true

                runtime-attributes = """
                  String? docker
                """

                submit = "/bin/bash ${script}"

                submit-docker = """
                  # Build the Docker image into a singularity image, using the head node
                  DOCKER_NAME=$(sed -e 's/[^A-Za-z0-9._-]/_/g' <<< ${docker})
                  IMAGE=${cwd}/$DOCKER_NAME.sif
                  if [ ! -f $IMAGE ]; then
                      singularity pull $IMAGE docker://${docker}
                  fi

                  # validate sif was created
                  if [ ! -f $IMAGE ]; then
                      >&2 echo "Image was not found in docker registry: ${docker}"
                      exit 1
                  fi

                  singularity exec \
                  --bind ${cwd}:${docker_cwd} \
                  --bind /global/scratch/jfroula/jaws-example-wdl/referencing_db_and_singularity/db:/refdata \
                  docker://${docker} ${job_shell} ${script}
                """

                # Root directory where Cromwell writes job results in the container. This value
                # can be used to specify where the execution folder is mounted in the container.
                # it is used for the construction of the docker_cwd string in the submit-docker
                # value above AND in the generation of the "script" file.
                dockerRoot = /global/scratch/jfroula/jaws-example-wdl/referencing_db_and_singularity/cromwell-executions
            }
        }
    }
}

