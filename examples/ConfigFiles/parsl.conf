# Here is where you can define the backend providers that Cromwell understands.
# The default is a local provider.
# To add additional backend providers, you should copy paste additional backends
# of interest that you can find in the cromwell.example.backends folder
# folder at https://www.github.com/broadinstitute/cromwell
# Other backend providers include SGE, SLURM, Docker, udocker, Singularity. etc.
# Don't forget you will need to customize them for your particular use case.
backend {
  # Override the default backend.
  default = "Local"

  # The list of providers.
  providers {
    # Copy paste the contents of a backend provider in this section
    # Examples in cromwell.example.backends include:
    # LocalExample: What you should use if you want to define a new backend provider

    # Note that these other backend examples will need tweaking and configuration.
    # Please open an issue https://www.github.com/broadinstitute/cromwell if you have any questions

    # The local provider is included by default. This is an example.
    # Define a new backend provider.
    parsl {
      # The actor that runs the backend.
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

      # The backend custom configuration.
      config {

        # If true submits scripts to the bash background using "&".
        run-in-background = true

        # The list of possible runtime custom attributes.
        runtime-attributes = """
        String? docker
        String? docker_user
        Int cpus = 2
        Int memory_gb = 1
        """

        # Submit string when there is no "docker" runtime attribute.
        submit = """
            python send.py \
                -c ${cpus} \
                -m ${memory_gb} \
                -s ${site} \
                -cmd ${script}
        """

        # Submit string when there is a "docker" runtime attribute.
        submit-docker = """
            LOOKUP=$(shifterimg lookup ${docker})
            if [[ ! $LOOKUP ]]; then
                shifterimg pull ${docker}
            fi

            python send.py \
                -c ${cpus} \
                -m ${memory_gb} \
                -s ${site} \
                -cmd ${script}
        """

        job-id-regex = "Task ID: (\\d+)"
        kill = ""
        check-alive = "python read_db.py -t ${job_id}"

      }
    }
  }
}
