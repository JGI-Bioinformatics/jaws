include required(classpath("application"))

webservice
{
  port = 50010
}

system
{
  abort-jobs-on-terminate = false
  graceful-server-shutdown = true
  workflow-restart = true
  max-concurrent-workflows = 100000
  max-workflow-launch-count = 100000
  new-workflow-poll-rate = 1
  number-of-workflow-log-copy-workers = 20
  number-of-cache-read-workers = 50
}

workflow-options
{
  workflow-log-dir: "./cromwell-workflow-logs"
  workflow-log-temporary: false
  workflow-failure-mode: "ContinueWhilePossible"
  default
  {
    workflow-type: WDL
    workflow-type-version: "draft-2"
  }
}

call-caching
{
  enabled = true
  invalidate-bad-cache-result = true
}

backend
{
  default = "Local"

  providers
  {

    Local
    {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

      docker {
        hash-lookup {
         enabled = false
        }
      }

      config
      {
        concurrent-job-limit = 7
        run-in-background = true
        #temporary-directory = "`mktemp -d \"/global/scratch/jaws/dev/cromwell-tmp\"/tmp.XXXXXX`"

        # The list of possible runtime custom attributes.
        runtime-attributes = """
        String? docker
        String? docker_user
        """

        # Submit string when there is no "docker" runtime attribute.
        submit = "/usr/bin/env bash ${script}"

        # Submit string when there is a "docker" runtime attribute.
        submit-docker = "./singularity_exec.sh ${cwd} ${docker_cwd} ${docker} ${job_shell} ${script}"

        root = "${cwd}/cromwell-executions"
        dockerRoot = "/cromwell-executions"

        filesystems
        {
          local
          {
            localization: [ "soft-link", "copy" ]

            caching {
              duplication-strategy: [ "hard-link", "soft-link", "copy" ]
              hashing-strategy: "file"
            }
          }
        }

        default-runtime-attributes
        {
          failOnStderr: false
          continueOnReturnCode: 0
        }
      }
    }

    JTM
    {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
       
      docker {
        hash-lookup {
         enabled = false
        }
      }

      config {
        runtime-attributes = """
        String time = "00:00:00"
        Int cpu = 1
        String mem = "0G"
        String cluster = "jaws_lbl_gov"
        String poolname = "small"
        #Int poolsize = 1
        String constraint = "haswell"
        String qos = "condo_jgicloud"
        String account = "lr_jgicloud"
        Int node = 1
        Int nwpn = 1
        Int shared = 1
        String? docker
        """

        submit = "jtm-submit -cr '/bin/bash ${script}' -cl ${cluster} -t ${time} -c ${cpu} -m ${mem} -p ${poolname} -N ${node} -nwpn ${nwpn} -jid ${job_name} --shared ${shared} --qos ${qos} --account ${account}"

        submit-docker = """
          ## Build the Docker image into a singularity image, using the head node
          #DOCKER_NAME=$(sed -e 's/[^A-Za-z0-9._-]/_/g' <<< ${docker})
          #IMAGE=/global/scratch/jaws/sif_files/$DOCKER_NAME.sif
          #if [ ! -f $IMAGE ]; then
          #    singularity pull $IMAGE docker://${docker}
          #fi

          ## validate sif was created
          #if [ ! -f $IMAGE ]; then
          #    >&2 echo "Image was not pulled successfully from docker registry: ${docker}"
          #    exit 1
          #fi

          # singularity_exec.sh lives here: /global/home/groups-sw/lr_jgicloud/dev/jtm/bin/singularity_exec.sh
          # It is required to circumvent an issue with special characters in the singularity 
          # command AND it sets some environmental variables to let singularity know where 
          # pull temp image layers so we don't get the 'out of memory' error.
          jtm-submit -cr './singularity_exec.sh ${cwd} ${docker_cwd} ${docker} ${job_shell} ${script}' -cl ${cluster} -t ${time} -c ${cpu} -m ${mem} -p ${poolname} -C ${constraint} -N ${node} -nwpn ${nwpn} -jid ${job_name} --shared ${shared} --qos ${qos} --account ${account}
        """

        kill = "jtm-kill ${job_id}"
        check-alive = "jtm-isalive ${job_id}"
        job-id-regex = "JTM task ID (\\d+)"
        root = "/global/scratch/jaws/dev/cromwell-executions"
        dockerRoot = "/global/scratch/jfroula/JAWS/jaws-example-wdl/referencing_db_and_shifter"
      }
    }
  }
}

database
{
  profile = "slick.jdbc.MySQLProfile$"
  db
  {
    #driver = "com.mysql.jdbc.Driver"
    driver = "com.mysql.cj.jdbc.Driver"
    url = "jdbc:mysql://jaws-db.lbl.gov:3306/cromwell_dev?rewriteBatchedStatements=true&autoReconnect=true"
    user = "cromwell_dev"
    password = "7f7VG1d^rD1hS9mwW0R"
    connectionTimeout = 10000
  }
  insert-batch-size = 2000
}
