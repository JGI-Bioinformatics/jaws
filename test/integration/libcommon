#!/usr/bin/env bash
# this file is to be sourced, not executed

function check_available() {
  command -v $1 >/dev/null 2>&1
}


function ensure_installed() {
  missing_software=""
  for s in "$@"; do
    check_available $s || missing_software+="$s "
  done
  [[ ! -z $missing_software ]] && { printf "ERROR: the following software needs to be installed: $missing_software \n" >&2; exit 1; }
}

function ensure_aws_creds() {
  [[ -z $AWS_ACCESS_KEY_ID ]] && { printf "Missing AWS settings (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION)\n"; exit 1; }
  [[ -z $AWS_SECRET_ACCESS_KEY ]] && { printf "Missing AWS settings (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION)\n"; exit 1; }
  [[ -z $AWS_DEFAULT_REGION ]] && { printf "Missing AWS settings (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION)\n"; exit 1; }
}

function ensure_init() {
  export CI_PROJECT_NAME=${CI_PROJECT_NAME:-jaws}
  export CI_PIPELINE_ID=${CI_PIPELINE_ID:-0}
  export PIPELINE_TAG="$CI_PROJECT_NAME-$CI_PIPELINE_ID"
}

function fetch_elasticluster_data() {
  [[ -d elasticluster-data/ ]] && rm -rf elasticluster-data/
  aws s3 cp --recursive s3://jaws-testing/$PIPELINE_TAG/ elasticluster-data/
  aws s3 cp --recursive s3://jaws-testing/elasticluster-keys/ keys/
  sed -i.bak "s|user_key_private=.*|user_key_private=$(pwd)/keys/id_elasticluster|" elasticluster-data/config
  sed -i.bak "s|user_key_public=.*|user_key_public=$(pwd)/keys/id_elasticluster.pub|" elasticluster-data/config
  chmod 600 keys/id_elasticluster
}
