#!/bin/bash -l

echo "BEGIN generate-shims"

# NOTE: generate-shims should be run after generate-venvs

## VERIFY REQUIRED VARS ARE DEFINED
# If any env are undefined, try sourcing the setup script and check again.
# Exits if any required var is undefined.
REQUIRED_VARS="
DEPLOYMENT_NAME
CONFIG_DIR
SHIM_DIR
LOGS_DIR
LOG_LEVEL
JTM_CONFIG_FILE
SITE_JTM_SCRATCH_DIR
SITE_JTM_GROUP
SITE_CLIENT_GROUP
SITE_JAWS_GROUP
SITE_CLIENT_INSTALL_DIR
SITE_CONTAINER_TYPE
SITE_CROMWELL_TMPDIR
SITE_LOAD_JAVA
JTM_VENV_DIR
SITE_VENV_DIR
"
RESULT=0
for VAR in $REQUIRED_VARS; do
  if [ -z ${!VAR+xxx} ]; then
    echo "Missing env var, $VAR; sourcing setup script..."
    source ./test/integration/define-env
    RESULT=1
    break
  fi
done
if [[ $RESULT -ne 0 ]]; then
  RESULT=0
  for VAR in $REQUIRED_VARS; do
    if [ -z ${!VAR+xxx} ]; then
      echo "Missing env var: $VAR">&2
      RESULT=1
    fi
  done
fi
[ $RESULT -eq 0 ] || exit 1


## WRITE SHIM SCRIPTS

# If the DEPLOY-CLIENT flag is set, the deploy-client script will be run, but the files must have group and permissions set.
# Unfortunately, chgrp/chmod don't work on the parallel-fs when executed by the gitlab-runner for some reason; the
# solution is to have the jaws user perform these commands in one of the shims (under supervsiord), so it's executed before one
# of the required services is executed.  This is a hack.
FIX_PERMS_CLIENT=""
[[ -n "$SITE_CLIENT_INSTALL_DIR" ]] && FIX_PERMS_CLIENT="fix_perms $SITE_CLIENT_GROUP $SITE_CLIENT_INSTALL_DIR"

# transfer-daemon script
cat <<EOM > $SHIM_DIR/jaws-site-transfer-daemon-$DEPLOYMENT_NAME
#!/bin/bash -l

function fix_perms() {
    local GROUP="\$1"
    local DIR="\$2"
    chmod -R a+rX "\$DIR"
    chmod -R ug+rwX "\$DIR"
    chgrp -R "\$GROUP" "\$DIR"
    find "\$DIR" -type d -exec chmod g+s '{}' \;
}

function set_jaws_acl() {
    local DIR="\$1"
    chmod 2775 \$DIR
    setfacl -m g:$SITE_JAWS_GROUP:rwx \$DIR
    setfacl -m g:$SITE_JTM_GROUP:rwx \$DIR
    setfacl -m g:$SITE_CLIENT_GROUP:rwx \$DIR
}

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8

test -d "$SITE_JAWS_SCRATCH_DIR" || mkdir -p "$SITE_JAWS_SCRATCH_DIR"
chmod 2775 "$SITE_JAWS_SCRATCH_DIR"
test -d $SITE_INPUTS_DIR || mkdir -p $SITE_INPUTS_DIR
chmod 0775 $SITE_INPUTS_DIR
test -d $SITE_DOWNLOADS_DIR || mkdir -p $SITE_DOWNLOADS_DIR
chmod 2775 $SITE_DOWNLOADS_DIR

$FIX_PERMS_CLIENT

set_jaws_acl $SITE_INPUTS_DIR
set_jaws_acl $SITE_DOWNLOADS_DIR

source $SITE_VENV_DIR/bin/activate
exec jaws-site --log $LOGS_DIR/site-transfer-daemon.log --config $CONFIG_DIR/jaws-site.conf --log-level $LOG_LEVEL transfer-daemon
EOM

# run-daemon script
cat <<EOM > $SHIM_DIR/jaws-site-run-daemon-$DEPLOYMENT_NAME
#!/bin/bash -l

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8

source $SITE_VENV_DIR/bin/activate
exec jaws-site --log $LOGS_DIR/site-run-daemon.log --config $CONFIG_DIR/jaws-site.conf --log-level $LOG_LEVEL run-daemon
EOM

# performance-metrics-daemon script
cat <<EOM > $SHIM_DIR/jaws-site-perf-metrics-daemon-$DEPLOYMENT_NAME
#!/bin/bash -l

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8

source $SITE_VENV_DIR/bin/activate
exec jaws-site --log $LOGS_DIR/site-perf-metrics-daemon.log --config $CONFIG_DIR/jaws-site.conf --log-level $LOG_LEVEL perf-metrics-daemon
EOM

## rpc shim script
cat <<EOM > "$SHIM_DIR/jaws-site-rpc-$DEPLOYMENT_NAME"
#!/bin/bash -l

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8

# START RPC SERVER
source $SITE_VENV_DIR/bin/activate
exec jaws-site --log $LOGS_DIR/site-rpc.log --config $CONFIG_DIR/jaws-site.conf --log-level $LOG_LEVEL rpc
EOM

## jtm shim script
cat <<EOM > "$SHIM_DIR/jaws-jtm-$DEPLOYMENT_NAME"
#!/bin/bash -l

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8

test -d $SITE_JTM_SCRATCH_DIR || mkdir $SITE_JTM_SCRATCH_DIR
chgrp $SITE_JTM_GROUP $SITE_JTM_SCRATCH_DIR
chgrp $SITE_JTM_GROUP $SITE_INPUTS_DIR
chmod 2770 $SITE_JTM_SCRATCH_DIR

# DEPLOY TO NFS DIR
# HACK: see .gitlab-ci.yml for the explanation of why that copy does not happen in the CI directly

#test -d $JTM_VENV_DIR || mkdir -p $JTM_VENV_DIR
#chmod 2770 $JTM_VENV_DIR

#cp $CONFIG_DIR/jaws-jtm.conf $CONFIG_DIR/
#chgrp $SITE_JTM_GROUP $JTM_CONFIG_FILE
#chmod 0640 $CONFIG_DIR/jaws-jtm.conf

# RUN JTM

source $JTM_VENV_DIR/bin/activate
export JTM_CONFIG_FILE=$JTM_CONFIG_FILE

exec jtm --config=$CONFIG_DIR/jaws-jtm.conf --debug manager -ld $LOGS_DIR
EOM

# TODO: Need to create executable scripts for running recv.py
# Otherwise we need to know the location of the script which may not be best practice

## parsl-recv shim script
cat <<EOM > "$SHIM_DIR/jaws-parsl-recv-$DEPLOYMENT_NAME"
#!/bin/bash -l

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8

source $INSTALL_DIR/parsl/bin/activate
exec jaws-parsl-recv --config=$CONFIG_DIR/parsl.ini
EOM

## SET PERMISSIONS
chgrp "$SITE_JTM_GROUP" "$SHIM_DIR/jaws-jtm-$DEPLOYMENT_NAME"
chgrp "$SITE_JTM_GROUP" "$SHIM_DIR/jaws-parsl-recv-$DEPLOYMENT_NAME"
chmod +x "$SHIM_DIR"/*

printf "END generate-shims\n\n"
