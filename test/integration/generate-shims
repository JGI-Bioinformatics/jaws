#!/usr/bin/env bash

echo "BEGIN generate-shims"

# NOTE: generate-shims should be run after generate-venvs

## VERIFY REQUIRED VARS ARE DEFINED
# If any env are undefined, try sourcing the setup script and check again.
# Exits if any required var is undefined.
REQUIRED_VARS="
DEPLOYMENT_NAME
INSTALL_DIR
SITE_JTM_WORKER_INSTALL_DIR
SITE_JTM_SCRATCH_DIR
SITE_JTM_GROUP
SITE_JAWS_GROUP
SITE_REF_DATA_DIR
LOG_LEVEL
SITE_CONTAINER_TYPE
SITE_CROMWELL_TMPDIR
SITE_LOAD_JAVA
"
RESULT=0
for VAR in $REQUIRED_VARS; do
  if [ -z ${!VAR+xxx} ]; then
    echo "Missing env var, $VAR; sourcing setup script..."
    source ./test/integration/define-env
    RESULT=1
    break
  fi
done
if [[ $RESULT -ne 0 ]]; then
  RESULT=0
  for VAR in $REQUIRED_VARS; do
    if [ -z ${!VAR+xxx} ]; then
      echo "Missing env var: $VAR">&2
      RESULT=1
    fi
  done
fi
[ $RESULT -eq 0 ] || exit 1


## WRITE SHIM SCRIPTS

# If the DEPLOY-CLIENT flag is set, the deploy-client script will be run, but the files must have group and permissions set.
# Unfortunately, chgrp/chmod don't work on the parallel-fs when executed by the gitlab-runner for some reason; the
# solution is to have the jaws user perform these commands in one of the shims (under supervsiord), so it's executed before one
# of the required services is executed.  This is a hack.
FIX_PERMS_CLIENT=""
[[ -n "$DEPLOY_JAWS_CLIENT" ]] && [[ "$DEPLOY_JAWS_CLIENT" -eq 1 ]] && FIX_PERMS_CLIENT="fix_perms $SITE_CLIENT_GROUP $SITE_CLIENT_INSTALL_DIR"
cat <<EOM > $SHIM_DIR/jaws-site-daemon-$DEPLOYMENT_NAME
#!/usr/bin/env bash

function fix_perms() {
    local GROUP="\$1"
    local DIR="\$2"
    chmod -R a+rX "\$DIR"
    chmod -R ug+rwX "\$DIR"
    chgrp -R "\$GROUP" "\$DIR"
    find "\$DIR" -type d -exec chmod g+s '{}' \;
}

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8

test -d "$SITE_JAWS_SCRATCH_DIR" || mkdir "$SITE_JAWS_SCRATCH_DIR"
chmod 775 "$SITE_JAWS_SCRATCH_DIR"
test -d "$SITE_DOWNLOADS_DIR" || mkdir "$SITE_DOWNLOADS_DIR"
chmod 775 "$SITE_DOWNLOADS_DIR"

$FIX_PERMS_CLIENT

source $INSTALL_DIR/site/bin/activate
exec jaws-site --log $LOGS_DIR/site-daemon.log --config $CONFIG_DIR/jaws-site.conf --log-level $LOG_LEVEL daemon
EOM

cat <<EOM > "$SHIM_DIR/jaws-site-central-rpc-$DEPLOYMENT_NAME"
#!/usr/bin/env bash

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8

# START RPC SERVER
source $INSTALL_DIR/site/bin/activate
exec jaws-site --log $LOGS_DIR/site-central-rpc.log --config $CONFIG_DIR/jaws-site.conf --log-level $LOG_LEVEL central-rpc
EOM

cat <<EOM > "$SHIM_DIR/jaws-site-jtm-rpc-$DEPLOYMENT_NAME"
#!/usr/bin/env bash

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8

source $INSTALL_DIR/site/bin/activate
exec jaws-site --log $LOGS_DIR/site-jtm-rpc.log --config $CONFIG_DIR/jaws-site.conf --log-level DEBUG jtm-rpc
EOM

cat <<EOM > "$SHIM_DIR/jaws-jtm-$DEPLOYMENT_NAME"
#!/usr/bin/env bash

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8


# DEPLOY TO NFS DIR
# HACK: see .gitlab-ci.yml for the explanation of why that copy does not happen in the CI directly

test -d $SITE_JTM_WORKER_INSTALL_DIR || mkdir $SITE_JTM_WORKER_INSTALL_DIR
test -d $SITE_JTM_SCRATCH_DIR || mkdir $SITE_JTM_SCRATCH_DIR
test -d $SITE_UPLOADS_DIR || mkdir $SITE_UPLOADS_DIR

cp $CONFIG_DIR/jaws-jtm.conf $SITE_JTM_WORKER_INSTALL_DIR/
chgrp $SITE_JTM_GROUP $SITE_JTM_WORKER_INSTALL_DIR/jaws-jtm.conf
chgrp $SITE_JTM_GROUP $SITE_UPLOADS_DIR
chmod 770 $SITE_JTM_WORKER_INSTALL_DIR
chmod 640 $SITE_JTM_WORKER_INSTALL_DIR/jaws-jtm.conf
chmod 775 $SITE_JTM_SCRATCH_DIR
chmod 777 $SITE_UPLOADS_DIR


# RUN JTM

source $INSTALL_DIR/jtm/bin/activate
export JTM_CONFIG_FILE=$CONFIG_DIR/jaws-jtm.conf

exec jtm --config=$CONFIG_DIR/jaws-jtm.conf --debug manager -ld $LOGS_DIR
EOM

## SET PERMISSIONS
chgrp "$SITE_JTM_GROUP" "$SHIM_DIR/jaws-jtm-$DEPLOYMENT_NAME"
chmod +x "$SHIM_DIR"/*

printf "END generate-shims\n\n"
