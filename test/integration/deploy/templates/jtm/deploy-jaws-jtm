#!/bin/bash

set -eo pipefail

## DEFINE INSTALL VARS
jaws_group=$JAWS_SITE_JAWS_GROUP_PERMISSION
jtm_group=$JAWS_SITE_JTM_GROUP_PERMISSION
src_dir=$JAWS_SRC_DIR
install_dir=$JAWS_INSTALL_DIR
jaws_scratch_dir=$JAWS_SITE_SCRATCH_DIR
jtm_scratch_dir=$JAWS_SITE_JTM_SCRATCH_DIR
jtm_worker_install_dir=$JAWS_SITE_JTM_WORKER_INSTALL_DIR
jtm_dir=$install_dir/jtm
upload_dir=$jaws_scratch_dir/uploads
config_dir=$install_dir/configs
shim_dir=$install_dir/shims
log_dir=$install_dir/logs
developer_mode=$JAWS_DEVELOPER_MODE
is_local_dev_env=$JAWS_IS_LOCAL_DEV_ENV

## PERMISSIONS
function fix_perms() {
    local dir=$1
    local group=$2
    chmod -R a+rX $dir
    chmod -R ug+rwX $dir
    [[ ! -z $group ]] && chgrp -R $group $dir
    if [[ -d $dir ]]; then
        find $dir -type d -exec chmod g+s '{}' \;
    fi
}


## MAKE DIR IF NOT EXIST
## If deploying local dev, ensure that directories created by local dev doesn't affect other deployments.
if [[ -z $is_local_dev_env || $is_local_dev_env == 0 ]];then
  test -d $jtm_dir && rm -rf $jtm_dir
  test -d $jtm_worker_install_dir && rm -rf $jtm_worker_install_dir
else
  test -d $jtm_dir || mkdir $jtm_dir
fi
test -d $shim_dir || mkdir $shim_dir
test -d $log_dir || mkdir $log_dir


## CREATE PYTHON VIRTUALENV
python3 -m venv $jtm_dir && \
  source $jtm_dir/bin/activate && \
  pip install --upgrade pip && \
  pip install wheel && \
  deactivate
python3 -m venv $jtm_worker_install_dir && \
  source $jtm_worker_install_dir/bin/activate && \
  pip install --upgrade pip && \
  pip install wheel && \
  deactivate


## INSTALL JAWS FILES
if [[ $developer_mode == 1 ]]; then
  echo "** Installing in developer mode **"
  source $jtm_dir/bin/activate && \
    cd $src_dir/rpc && pip install -e . && \
    cd $src_dir/jtm && pip install -e . && \
    deactivate
  source $jtm_worker_install_dir/bin/activate && \
    cd $src_dir/rpc && pip install -e . && \
    cd $src_dir/jtm && pip install -e . && \
    deactivate
else
  # remove files only if not installing local dev instance.
  if [[ ! -z $is_local_dev_env || $is_local_dev_env == 0 ]]; then
    test -d $src_dir/rpc/dist && rm -f $src_dir/rpc/dist/*
    test -d $src_dir/jtm/dist && rm -f $src_dir/jtm/dist/*
  fi
  cd $src_dir/rpc && python setup.py bdist_wheel && \
    cd ../jtm && python setup.py bdist_wheel
  source $jtm_dir/bin/activate && \
    pip install $src_dir/rpc/dist/* && \
    pip install $src_dir/jtm/dist/* && \
    deactivate
  source $jtm_worker_install_dir/bin/activate && \
    pip install $src_dir/rpc/dist/* && \
    pip install $src_dir/jtm/dist/* && \
    deactivate
fi


## Create jaws-jtm shim file
shim_file=$shim_dir/jaws-jtm
cat <<EOM > $shim_file
#!/usr/bin/env bash

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8


# DEPLOY TO NFS DIR
# HACK: see .gitlab-ci.yml for the explanation of why that copy does not happen in the CI directly

test -d $jtm_worker_install_dir || (mkdir $jtm_worker_install_dir && \
  chmod 770 $jtm_worker_install_dir && \
  chmd 640 $jtm_worker_install_dir/jaws-jtm.conf
  )
test -d $jtm_scratch_dir || (mkdir $jtm_scratch_dir && chmod 775 $jtm_scratch_dir)
test -d $upload_dir || (mkdir $upload_dir && chmod 777 $upload_dir)

## If deploying local dev, ensure that directories created by local dev doesn't affect other deployments
if [[ -z $is_local_dev_env || $is_local_dev_env == 0 ]];then
    cp $config_dir/jaws-jtm.conf $jtm_worker_install_dir/
fi

if [[ ! -z "$jtm_group" ]]; then
    chgrp $jtm_group $jtm_worker_install_dir/jaws-jtm.conf
    chgrp $jtm_group $upload_dir
fi


# RUN JTM

source $install_dir/jtm/bin/activate
export JTM_CONFIG_FILE=$config_dir/jaws-jtm.conf

exec jtm --config=$config_dir/jaws-jtm.conf --debug manager -ld $log_dir
EOM
chmod 770 $shim_file
fix_perms $jaws_group $shim_file
