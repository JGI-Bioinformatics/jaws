stages:
  - test
  - bandit-sast
  - semgrep-sast
  - esline-sast
  - nodejs-scan-sast
  - unit-test
  - image-build
  - deploy-jaws
  - package
  - release-jaws

include:
  - project: "advanced-analysis/ci-templates"
    ref: "main"
    file: "SAST.gitlab-ci.yml"

variables:
  GIT_STRATEGY: clone

  ## GLOBAL INSTALL VARIABLES:
  JAWS_SITES: "CORI JGI TAHOMA AWS ASSEMBLY"
  JAWS_VERSION: "3.0"
  JAWS_DOCS_URL: "https://jaws-docs.readthedocs.io/en/latest/"
  JAWS_CENTRAL_HOST: "http://jaws.lbl.gov"
  JAWS_RMQ_HOST: "rmq.lbl.gov"
  JAWS_RMQ_PORT: 5672
  JAWS_GLOBUS_CLIENT_ID: "1a130a01-48bc-489b-a729-9ab858de1755"
  CROMWELL_VERSION: "58"
  CROMWELL_JAR_URL: "https://github.com/broadinstitute/cromwell/releases/download/58/cromwell-58.jar"
  WOMTOOL_JAR_URL: "https://github.com/broadinstitute/cromwell/releases/download/58/womtool-58.jar"
  JAWS_DB_HOST: "jaws-db.lbl.gov"
  JAWS_DB_PORT: 3306
  JAWS_DEFAULT_CONTAINER: "ubuntu@sha256:b5a61709a9a44284d88fb12e5c48db0409cfad5b69d4ff8224077c57302df9cf"
  JAWS_EMAIL_USER: ""
  JAWS_EMAIL_SERVER: ""
  JAWS_EMAIL_PORT: "587"

  ## DEPLOYMENT-SPECIFIC VARIABLES:
  dev_LOG_LEVEL: "DEBUG"
  dev_JAWS_SUPERVISOR_PORT: 64101
  dev_JAWS_CENTRAL_SUPERVISOR_PORT: 64121
  dev_JAWS_AUTH_PORT: 3001
  dev_JAWS_REST_PORT: 5001
  dev_CROMWELL_PORT: 50101
  staging_LOG_LEVEL: "DEBUG"
  staging_JAWS_SUPERVISOR_PORT: 64102
  staging_JAWS_CENTRAL_SUPERVISOR_PORT: 64122
  staging_JAWS_AUTH_PORT: 3002
  staging_JAWS_REST_PORT: 5002
  staging_CROMWELL_PORT: 50102
  prod_LOG_LEVEL: "INFO"
  prod_JAWS_SUPERVISOR_PORT: 64103
  prod_JAWS_CENTRAL_SUPERVISOR_PORT: 64123
  prod_JAWS_AUTH_PORT: 3003
  prod_JAWS_REST_PORT: 5003
  prod_CROMWELL_PORT: 50103

  ## CENTRAL-SPECIFIC VARIABLES:
  CENTRAL_INSTALL_BASEDIR: "/opt/jaws"
  CENTRAL_PYTHON: "python3"
  CENTRAL_LOAD_PYTHON: ""
  CENTRAL_JAWS_GROUP: "jaws"
  CENTRAL_JAWS_SCRATCH_BASEDIR: "/tmp/jaws-tmp"
  CENTRAL_SUPERVISOR_HOST: "http://jaws.lbl.gov"

  ## SITE-SPECIFIC VARIABLES:
  CORI_CLIENT_INSTALL_BASEDIR: "/global/cfs/projectdirs/jaws"
  CORI_INSTALL_BASEDIR: "/global/cfs/projectdirs/jaws/jaws-install"
  CORI_USER_GROUP: ""
  CORI_GLOBUS_EP: "be1ff650-dcbc-11ea-85a2-0e1702b77d41"
  CORI_GLOBUS_HOST_PATH: "/"
  CORI_PYTHON: "python3"
  CORI_LOAD_PYTHON: "module load python/3.9-anaconda-2021.11"
  CORI_JAWS_GROUP: "jaws"
  CORI_JTM_GROUP: "jaws_jtm"
  CORI_CLIENT_GROUP: "genome"
  CORI_JAWS_SCRATCH_BASEDIR: "/global/cscratch1/sd/jaws"
  CORI_JTM_SCRATCH_BASEDIR: "/global/cscratch1/sd/jaws_jtm"
  CORI_REF_DATA_DIR: "/global/dna/shared/databases/jaws/refdata"
  CORI_FAST_SCRATCH_DIR: ""
  CORI_BIG_SCRATCH_DIR: ""
  CORI_SUPERVISOR_HOST: "http://cori20.nersc.gov"
  CORI_CONTAINER_TYPE: "shifter"
  CORI_CONTAINER_TMPDIR: "/global/cscratch1/sd/jaws_jtm"
  CORI_CLUSTER_QOS: "genepool_special"
  CORI_CLUSTER_PARTITION: ""
  CORI_CLUSTER_ACCOUNT: "fungalp"
  CORI_CLUSTER_CONSTRAINT: "haswell"
  CORI_MAX_RAM_GB: 758
  CORI_RMQ_HOST: "rmq.lbl.gov"
  CORI_RMQ_PORT: 5672
  CORI_MONITOR_RMQ_HOST: "rmq.lbl.gov"
  CORI_MONITOR_RMQ_PORT: 5672
  CORI_HTCONDOR_INSTALL: "/global/cfs/projectdirs/jaws/condor/condor"
  CORI_HTCONDOR_MASTER_CONFIG: "/global/cfs/projectdirs/jaws/condor/condor_central.config"
  CORI_PERFORMANCE_METRICS_SCRIPT: "/global/cfs/cdirs/jaws/jaws-metrics/bin/pagurus"
  CORI_PERFORMANCE_METRICS_DIR: "/global/cscratch1/sd/jaws_jtm/monitoring-runs"
  CORI_PERFORMANCE_METRICS_CLEANUP: 600

  JGI_CLIENT_INSTALL_BASEDIR: "/global/home/groups-sw/lr_jgicloud"
  JGI_INSTALL_BASEDIR: "/global/home/groups-sw/lr_jgicloud/jaws-install"
  JGI_USER_GROUP: ""
  JGI_GLOBUS_EP: "e8b18c38-36cd-11eb-b54c-02d9497ca481"
  JGI_GLOBUS_HOST_PATH: "/global/scratch/users/jaws"
  JGI_PYTHON: "python"
  JGI_LOAD_PYTHON: "module load python/3.8.2-dll"
  JGI_JAWS_GROUP: "jaws"
  JGI_JTM_GROUP: "jaws"
  JGI_CLIENT_GROUP: "jgi"
  JGI_JAWS_SCRATCH_BASEDIR: "/global/scratch/users/jaws"
  JGI_JTM_SCRATCH_BASEDIR: "/global/scratch/users/jaws"
  JGI_REF_DATA_DIR: "/global/scratch/users/jaws/refdata"
  JGI_FAST_SCRATCH_DIR: ""
  JGI_BIG_SCRATCH_DIR: ""
  JGI_SUPERVISOR_HOST: "http://lrc-services.lbl.gov"
  JGI_CONTAINER_TYPE: "singularity"
  JGI_CONTAINER_TMPDIR: "/global/scratch/users/jaws"
  JGI_CLUSTER_QOS: "normal"
  JGI_CLUSTER_PARTITION: "jgi"
  JGI_CLUSTER_ACCOUNT: "jgi"
  JGI_CLUSTER_CONSTRAINT: ""
  JGI_MAX_RAM_GB: 512
  JGI_RMQ_HOST: "rmq.lbl.gov"
  JGI_RMQ_PORT: 5672
  JGI_MONITOR_RMQ_HOST: "rmq.lbl.gov"
  JGI_MONITOR_RMQ_PORT: 5672
  JGI_HTCONDOR_INSTALL: "/global/home/groups-sw/lr_jgicloud/condor/condor"
  JGI_HTCONDOR_MASTER_CONFIG: "/global/home/groups-sw/lr_jgicloud/condor/condor_central.config"
  JGI_PERFORMANCE_METRICS_SCRIPT: "/global/home/groups-sw/lr_jgicloud/jaws-metrics/bin/pagurus"
  JGI_PERFORMANCE_METRICS_DIR: "/global/scratch/users/jaws/jaws-jtm/monitoring-runs"
  JGI_PERFORMANCE_METRICS_CLEANUP: 600

  TAHOMA_CLIENT_INSTALL_BASEDIR: "/tahoma/mscjgi/jaws-install/jaws-client/"
  TAHOMA_INSTALL_BASEDIR: "/tahoma/mscjgi/jaws-install"
  TAHOMA_USER_GROUP: ""
  TAHOMA_GLOBUS_EP: "f441d224-35cd-11ec-95e9-853490a236f9"
  TAHOMA_GLOBUS_HOST_PATH: "/tahoma/mscjgi"
  TAHOMA_PYTHON: "python"
  TAHOMA_LOAD_PYTHON: "module load python/3.8.1"
  TAHOMA_JAWS_GROUP: "svc-jtm-manager"
  TAHOMA_JTM_GROUP: "svc-jtm-user"
  TAHOMA_CLIENT_GROUP: "svc-jtm-manager"
  TAHOMA_JAWS_SCRATCH_BASEDIR: "/tahoma/mscjgi/scratch"
  TAHOMA_JTM_SCRATCH_BASEDIR: "/tahoma/mscjgi/scratch"
  TAHOMA_REF_DATA_DIR: "/tahoma/mscjgi/refdata"
  TAHOMA_FAST_SCRATCH_DIR: ""
  TAHOMA_BIG_SCRATCH_DIR: "/big_scratch"
  TAHOMA_SUPERVISOR_HOST: "http://localhost"
  TAHOMA_CONTAINER_TYPE: "singularity"
  TAHOMA_CONTAINER_TMPDIR: "/big_scratch"
  TAHOMA_CLUSTER_QOS: ""
  TAHOMA_CLUSTER_PARTITION: ""
  TAHOMA_CLUSTER_ACCOUNT: "mscjgi"
  TAHOMA_CLUSTER_CONSTRAINT: ""
  TAHOMA_MAX_RAM_GB: 1500
  TAHOMA_RMQ_HOST: "mscjgi-rabbitmq.emsl.pnl.gov"
  TAHOMA_RMQ_PORT: 5672
  TAHOMA_MONITOR_RMQ_HOST: "rmq.lbl.gov"
  TAHOMA_MONITOR_RMQ_PORT: 5672
  TAHOMA_HTCONDOR_INSTALL: "/tahoma/mscjgi/condor/condor"
  TAHOMA_HTCONDOR_MASTER_CONFIG: "/tahoma/mscjgi/condor/condor_central.config"
  TAHOMA_PERFORMANCE_METRICS_SCRIPT: "/tahoma/mscjgi/jaws-metrics/bin/pagurus"
  TAHOMA_PERFORMANCE_METRICS_DIR: "/tahoma/mscjgi/jaws_jtm/monitoring-runs"
  TAHOMA_PERFORMANCE_METRICS_CLEANUP: 600

  AWS_CLIENT_INSTALL_BASEDIR: ""
  AWS_INSTALL_BASEDIR: "/home/ec2-user"
  AWS_USER_GROUP: ""
  AWS_GLOBUS_EP: ""
  AWS_GLOBUS_HOST_PATH: ""
  AWS_PYTHON: "python3"
  AWS_LOAD_PYTHON: ""
  AWS_JAWS_GROUP: "ec2-user"
  AWS_JTM_GROUP: "ec2-user"
  AWS_CLIENT_GROUP: "ec2-user"
  AWS_JAWS_SCRATCH_BASEDIR: "s3://jaws-site"
  AWS_JTM_SCRATCH_BASEDIR: "s3://jaws-site"
  AWS_REF_DATA_DIR: ""
  AWS_FAST_SCRATCH_DIR: ""
  AWS_BIG_SCRATCH_DIR: ""
  AWS_SUPERVISOR_HOST: "http://localhost"
  AWS_CONTAINER_TYPE: "docker"
  AWS_CONTAINER_TMPDIR: "/tmp"
  AWS_CLUSTER_QOS: ""
  AWS_CLUSTER_PARTITION: ""
  AWS_CLUSTER_ACCOUNT: "ec2-user"
  AWS_CLUSTER_CONSTRAINT: ""
  AWS_MAX_RAM_GB: 256
  AWS_RMQ_HOST: "rmq.lbl.gov"
  AWS_RMQ_PORT: 5672

  ASSEMBLY_CLIENT_INSTALL_BASEDIR: ""
  ASSEMBLY_INSTALL_BASEDIR: "/home/ec2-user"
  ASSEMBLY_USER_GROUP: "assembly"
  ASSEMBLY_GLOBUS_EP: ""
  ASSEMBLY_GLOBUS_HOST_PATH: ""
  ASSEMBLY_PYTHON: "python3"
  ASSEMBLY_LOAD_PYTHON: ""
  ASSEMBLY_JAWS_GROUP: "ec2-user"
  ASSEMBLY_JTM_GROUP: "ec2-user"
  ASSEMBLY_CLIENT_GROUP: "ec2-user"
  ASSEMBLY_JAWS_SCRATCH_BASEDIR: "s3://jaws-assembly"
  ASSEMBLY_JTM_SCRATCH_BASEDIR: "s3://jaws-assembly"
  ASSEMBLY_FAST_SCRATCH_DIR: ""
  ASSEMBLY_BIG_SCRATCH_DIR: ""
  ASSEMBLY_SUPERVISOR_HOST: "http://localhost"
  ASSEMBLY_CONTAINER_TYPE: "docker"
  ASSEMBLY_CONTAINER_TMPDIR: "/tmp"
  ASSEMBLY_CLUSTER_QOS: ""
  ASSEMBLY_CLUSTER_PARTITION: ""
  ASSEMBLY_CLUSTER_ACCOUNT: "ec2-user"
  ASSEMBLY_CLUSTER_CONSTRAINT: ""
  ASSEMBLY_MAX_RAM_GB: 512
  ASSEMBLY_RMQ_HOST: "rmq.lbl.gov"
  ASSEMBLY_RMQ_PORT: 5672

# this needs to be commented out in the jobs definitions, for the jobs to
# run in any case and not only when pushing a merge request.
.only-default: &only-default
  tags:
    - shared-shell
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

test-rpc:
  <<: *only-default
  stage: unit-test
  script:
    - python3.8 -m venv test-venv
    - source test-venv/bin/activate
    - pip3.8 install -r rpc/requirements.txt
    - pip3.8 install flake8 pytest pytest-cov
    - make test-rpc
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: rpc/coverage.xml 
test-site:
  <<: *only-default
  stage: unit-test
  script:
    - python3.8 -m venv test-venv
    - source test-venv/bin/activate
    - pip3.8 install rpc/
    - pip3.8 install -r site/requirements.txt
    - pip3.8 install flake8 pytest pytest-cov
    - make test-site
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: site/coverage.xml
test-condor:
  <<: *only-default
  stage: unit-test
  script:
    - python3.8 -m venv test-venv
    - source test-venv/bin/activate
    - pip3.8 install condor/
    - pip3.8 install -r condor/requirements.txt
    - pip3.8 install flake8 pytest pytest-cov
    - make test-condor
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: condor/coverage.xml

image: docker:19.03.12
services:
  - docker:19.03.12-dind
.docker-login: &docker-login
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build-rpc:
  tags:
  - docker-build
  stage: image-build
  variables:
    GITLAB_IMAGE_TAG: $CI_REGISTRY_IMAGE/rpc:$JAWS_VERSION
  <<: *docker-login
  script:
    - chmod +x build.sh
    - ./build.sh rpc $JAWS_VERSION prod
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
      allow_failure: true

build-site:
  tags:
    - docker-build
  stage: image-build
  variables:
    GITLAB_IMAGE_TAG: $CI_REGISTRY_IMAGE/site:$JAWS_VERSION
    RPC_IMAGE_TAG: $CI_REGISTRY_IMAGE/rpc:$JAWS_VERSION
  <<: *docker-login
  script:
    - docker pull $RPC_IMAGE_TAG
    - chmod +x build.sh
    - ./build.sh site $JAWS_VERSION prod
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
      allow_failure: true

## integration tests - only run on merge request

deploy-jaws-aws-dev:
  stage: deploy-jaws
  tags:
    - foo
  variables:
    DEPLOYMENT_NAME: "dev"
    JAWS_SITE: "AWS"
  environment:
    name: "aws/dev"
  script:
    - ./test/integration/deploy-jaws
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'
      allow_failure: true

deploy-jaws-cori-dev:
  stage: deploy-jaws
  tags:
    - cori
  variables:
    DEPLOYMENT_NAME: "dev"
    JAWS_SITE: "CORI"
  environment:
    name: "cori/dev"
  script:
    - ./test/integration/deploy-jaws
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-cori-staging:
  stage: deploy-jaws
  tags:
    - cori
  variables:
    DEPLOYMENT_NAME: "staging"
    JAWS_SITE: "CORI"
  environment:
    name: "cori/staging"
  script:
    - ./test/integration/deploy-jaws
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"

deploy-jaws-cori-prod:
  stage: release-jaws
  tags:
    - cori
  variables:
    DEPLOYMENT_NAME: "prod"
    JAWS_SITE: "CORI"
  environment:
    name: "cori/production"
  script:
    - ./test/integration/deploy-jaws
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: manual

deploy-jaws-jgi-dev:
  stage: deploy-jaws
  tags:
    - jgi
  variables:
    DEPLOYMENT_NAME: "dev"
    JAWS_SITE: "JGI"
  environment:
    name: "jgi/dev"
  script:
    - ./test/integration/deploy-jaws
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-jgi-staging:
  stage: deploy-jaws
  tags:
    - jgi
  variables:
    DEPLOYMENT_NAME: "staging"
    JAWS_SITE: "JGI"
  environment:
    name: "jgi/staging"
  script:
    - ./test/integration/deploy-jaws
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"

deploy-jaws-jgi-prod:
  stage: release-jaws
  tags:
    - jgi
  variables:
    DEPLOYMENT_NAME: "prod"
    JAWS_SITE: "JGI"
  environment:
    name: "jgi/production"
  script:
    - ./test/integration/deploy-jaws
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
      when: manual

deploy-jaws-tahoma-dev:
  stage: deploy-jaws
  tags:
    - tahoma
    - pnnl
  variables:
    DEPLOYMENT_NAME: "dev"
    JAWS_SITE: "TAHOMA"
  environment:
    name: "tahoma/dev"
  script:
    - ./test/integration/deploy-jaws
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-tahoma-staging:
  stage: deploy-jaws
  tags:
    - tahoma
    - pnnl
  variables:
    DEPLOYMENT_NAME: "staging"
    JAWS_SITE: "TAHOMA"
  environment:
    name: "tahoma/staging"
  script:
    - ./test/integration/deploy-jaws
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
      allow_failure: true

deploy-jaws-tahoma-prod:
  stage: release-jaws
  tags:
    - tahoma
    - pnnl
  variables:
    DEPLOYMENT_NAME: "prod"
    JAWS_SITE: "TAHOMA"
  environment:
    name: "tahoma/prod"
  script:
    - ./test/integration/deploy-jaws
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
      when: manual
      allow_failure: true

package:
  tags:
    - shared-shell
  stage: package
  script:
    - python3.8 -m venv pkg-venv
    - source pkg-venv/bin/activate 
    - pip3.8 install poetry wheel
    - make pkg-poetry
    - cd rpc && poetry config repositories.gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi" && poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN"
    - poetry publish --repository gitlab && cd ../
    - cd site && poetry config repositories.gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi" && poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN"
    - poetry publish --repository gitlab && cd ../
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
  allow_failure: true
