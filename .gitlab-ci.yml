stages:
  - test
  - reports
  - unit-test
  - image-build
  - deploy-jaws
  - package
  - release-jaws

include:
  - project: "advanced-analysis/ci-templates"
    ref: "main"
    file: "Code-Quality.gitlab-ci.yml"

variables:
  GIT_STRATEGY: clone

  JAWS_SITE_NAMES: "CORI JGI TAHOMA AWS ASSEMBLY NMDC PERLMUTTER"
  JAWS_SITE_VERSION: "1.0.11"

# this needs to be commented out in the jobs definitions, for the jobs to
# run in any case and not only when pushing a merge request.
.only-default: &only-default
  tags:
    - shared-shell
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

test-rpc:
  <<: *only-default
  stage: unit-test
  script:
    - python3.8 -m venv test-venv
    - source test-venv/bin/activate
    - pip3.8 install -r rpc/requirements.txt
    - pip3.8 install flake8 pytest pytest-cov
    - make test-rpc
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: rpc/coverage.xml 
test-site:
  <<: *only-default
  stage: unit-test
  script:
    - python3.8 -m venv test-venv
    - source test-venv/bin/activate
    - pip3.8 install rpc/
    - pip3.8 install -r site/requirements.txt
    - pip3.8 install flake8 pytest pytest-cov
    - make test-site
  coverage: '/(?i)TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: site/coverage.xml

image: docker:19.03.12
services:
  - docker:19.03.12-dind
.docker-login: &docker-login
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build-rpc:
  tags:
  - docker-build
  stage: image-build
  variables:
    GITLAB_IMAGE_TAG: $CI_REGISTRY_IMAGE/rpc:$JAWS_VERSION
  <<: *docker-login
  script:
    - chmod +x build.sh
    - ./build.sh rpc $JAWS_VERSION prod
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
      allow_failure: true

build-site:
  tags:
    - docker-build
  stage: image-build
  variables:
    GITLAB_IMAGE_TAG: $CI_REGISTRY_IMAGE/site:$JAWS_VERSION
    RPC_IMAGE_TAG: $CI_REGISTRY_IMAGE/rpc:$JAWS_VERSION
  <<: *docker-login
  script:
    - docker pull $RPC_IMAGE_TAG
    - chmod +x build.sh
    - ./build.sh site $JAWS_VERSION prod
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
      allow_failure: true

## integration tests - only run on merge request

deploy-jaws-aws-dev:
  stage: deploy-jaws
  tags:
    - aws
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
    JAWS_SITE_NAME: "AWS"
  environment:
    name: "aws/dev"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'
      allow_failure: true

deploy-jaws-cori-dev:
  stage: deploy-jaws
  tags:
    - cori20
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
    JAWS_SITE_NAME: "CORI"
  environment:
    name: "cori/dev"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-cori-staging:
  stage: deploy-jaws
  tags:
    - cori20
  variables:
    JAWS_DEPLOYMENT_NAME: "staging"
    JAWS_SITE_NAME: "CORI"
  environment:
    name: "cori/staging"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"

deploy-jaws-cori-prod:
  stage: release-jaws
  tags:
    - cori20
  variables:
    JAWS_DEPLOYMENT_NAME: "prod"
    JAWS_SITE_NAME: "CORI"
  environment:
    name: "cori/production"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: manual

deploy-jaws-jgi-dev:
  stage: deploy-jaws
  tags:
    - jgi
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
    JAWS_SITE_NAME: "JGI"
  environment:
    name: "jgi/dev"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-jgi-staging:
  stage: deploy-jaws
  tags:
    - jgi
  variables:
    JAWS_DEPLOYMENT_NAME: "staging"
    JAWS_SITE_NAME: "JGI"
  environment:
    name: "jgi/staging"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"

deploy-jaws-jgi-prod:
  stage: release-jaws
  tags:
    - jgi
  variables:
    JAWS_DEPLOYMENT_NAME: "prod"
    JAWS_SITE_NAME: "JGI"
  environment:
    name: "jgi/production"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
      when: manual

deploy-jaws-tahoma-dev:
  stage: deploy-jaws
  tags:
    - tahoma
    - pnnl
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
    JAWS_SITE_NAME: "TAHOMA"
  environment:
    name: "tahoma/dev"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-tahoma-staging:
  stage: deploy-jaws
  tags:
    - tahoma
    - pnnl
  variables:
    JAWS_DEPLOYMENT_NAME: "staging"
    JAWS_SITE_NAME: "TAHOMA"
  environment:
    name: "tahoma/staging"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
      allow_failure: true

deploy-jaws-tahoma-prod:
  stage: release-jaws
  tags:
    - tahoma
    - pnnl
  variables:
    JAWS_DEPLOYMENT_NAME: "prod"
    JAWS_SITE_NAME: "TAHOMA"
  environment:
    name: "tahoma/prod"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
      when: manual
      allow_failure: true

deploy-jaws-nmdc-dev:
  stage: deploy-jaws
  tags:
    - cori21
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
    JAWS_SITE_NAME: "NMDC"
  environment:
    name: "nmdc/dev"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-nmdc-staging:
  stage: deploy-jaws
  tags:
    - cori21
  variables:
    JAWS_DEPLOYMENT_NAME: "staging"
    JAWS_SITE_NAME: "NMDC"
  environment:
    name: "nmdc/staging"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"

deploy-jaws-nmdc-prod:
  stage: release-jaws
  tags:
    - cori21
  variables:
    JAWS_DEPLOYMENT_NAME: "prod"
    JAWS_SITE_NAME: "NMDC"
  environment:
    name: "nmdc/production"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: manual

deploy-jaws-perlmutter-dev:
  stage: deploy-jaws
  tags:
    - perlmutter
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
    JAWS_SITE_NAME: "PERLMUTTER"
  environment:
    name: "perlmutter/dev"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-perlmutter-staging:
  stage: deploy-jaws
  tags:
    - perlmutter
  variables:
    JAWS_DEPLOYMENT_NAME: "staging"
    JAWS_SITE_NAME: "PERLMUTTER"
  environment:
    name: "perlmutter/staging"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"

deploy-jaws-perlmutter-prod:
  stage: release-jaws
  tags:
    - perlmutter
  variables:
    JAWS_DEPLOYMENT_NAME: "prod"
    JAWS_SITE_NAME: "PERLMUTTER"
  environment:
    name: "perlmutter/production"
  script:
    - ./test/integration/deploy-jaws-site.sh
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: manual

package:
  tags:
    - shared-shell
  stage: package
  script:
    - python3.8 -m venv pkg-venv
    - source pkg-venv/bin/activate 
    - pip3.8 install poetry wheel
    - make pkg-poetry
    - cd rpc && poetry config repositories.gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi" && poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN"
    - poetry publish --repository gitlab && cd ../
    - cd site && poetry config repositories.gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi" && poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN"
    - poetry publish --repository gitlab && cd ../
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
  allow_failure: true
