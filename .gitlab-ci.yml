stages:
  - linter
  - test
  - reports
  - unit-test
  - image-build
  - deploy-jaws
  - package
  - release-jaws

include:
  - project: "advanced-analysis/ci-templates"
    ref: "main"
    file: "Code-Quality.gitlab-ci.yml"

variables:
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive

  JAWS_SITE_NAMES: "JGI TAHOMA AWS ASSEMBLY NMDC PERLMUTTER DORI NMDC_TAHOMA DEFIANT KBASE"
  JAWS_SITE_VERSION: "2.4.0"

# this needs to be commented out in the jobs definitions, for the jobs to
# run in any case and not only when pushing a merge request.

############    Begin anchors and extends definitions
.shell-default: &shell-default
  tags:
    - shared-shell
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "push"'

.docker-default: &docker-default
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  tags:
    - docker-build
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "push"'
  coverage: '/(?i)TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'

.supervisor-stop: &supervisor-stop
  before_script:
    - "source ./test/integration/setup_environment.sh"
    - "./test/integration/deploy_tools/supervisor.sh stop"

.systemd-stop: &systemd-stop
  before_script:
    - "source ./test/integration/setup_environment.sh"
    - "./test/integration/deploy_tools/systemd.sh stop"

.scrontab-stop: &scrontab-stop
  before_script:
    - "source ./test/integration/setup_environment.sh"
    - "./test/integration/deploy_tools/scrontab.sh stop"

.check-vm-connections: &check-vm-connections
  - curl -v https://jaws.jgi.doe.gov
  - curl -v https://jaws-rmq.jgi.doe.gov
  - curl -v https://jaws-ingest.jgi.doe.gov

.aws-deployment: &aws-deploy
  stage: deploy-jaws
  tags:
    - aws-dev
  variables:
    JAWS_SITE_NAME: "AWS"
  <<: *supervisor-stop
  script:
    - *check-vm-connections
    - "./test/integration/deploy.sh supervisor venv $JAWS_SITE_VERSION"

.jgi-deployment: &jgi-deploy
  stage: deploy-jaws
  tags:
    - jgi
  variables:
    CONTAINER_RUNTIME: "apptainer"
    JAWS_SITE_NAME: "JGI"
    APPTAINER_CACHEDIR: "/tmp"
  <<: *supervisor-stop
  script:
    - *check-vm-connections
    - "./test/integration/deploy.sh supervisor $CONTAINER_RUNTIME-run $JAWS_SITE_VERSION"

.tahoma-deployment: &tahoma-deploy
  stage: deploy-jaws
  tags:
    - tahoma
    - pnnl
  variables:
    no_proxy: "127.0.0.1, localhost, *.pnnl.gov *pnl.gov"
    HTTP_PROXY: "http://proxy.emsl.pnl.gov:3128"
    http_proxy: "http://proxy.emsl.pnl.gov:3128"
    HTTPS_PROXY: "http://proxy.emsl.pnl.gov:3128"
    https_proxy: "http://proxy.emsl.pnl.gov:3128"
    JAWS_SITE_NAME: "TAHOMA"
    CONTAINER_RUNTIME: "apptainer"
  <<: *supervisor-stop
  script:
    - *check-vm-connections
    - "./test/integration/deploy.sh supervisor $CONTAINER_RUNTIME-run $JAWS_SITE_VERSION"

.nmdc_tahoma-deployment: &nmdc_tahoma-deploy
  stage: deploy-jaws
  tags:
    - nmdc_tahoma
    - twf2
  variables:
    no_proxy: "127.0.0.1, localhost, *.pnnl.gov *pnl.gov"
    HTTP_PROXY: "http://proxy.emsl.pnl.gov:3128"
    http_proxy: "http://proxy.emsl.pnl.gov:3128"
    HTTPS_PROXY: "http://proxy.emsl.pnl.gov:3128"
    https_proxy: "http://proxy.emsl.pnl.gov:3128"
    JAWS_SITE_NAME: "NMDC_TAHOMA"
    CONTAINER_RUNTIME: "apptainer"
  <<: *supervisor-stop
  script:
    - *check-vm-connections
    - "./test/integration/deploy.sh supervisor $CONTAINER_RUNTIME-run $JAWS_SITE_VERSION"

.nmdc-deployment: &nmdc-deploy
  stage: deploy-jaws
  tags:
    - nmjaws
  variables:
    JAWS_SITE_NAME: "NMDC"
  <<: *scrontab-stop
  script:
    - *check-vm-connections
    - "source ./test/integration/write_shims.sh"
    - "write_shims nmdc"
    - "./test/integration/deploy.sh scrontab venv $JAWS_SITE_VERSION"

.perlmutter-deployment: &perlmutter-deploy
  stage: deploy-jaws
  tags:
    - perlmutter
  variables:
    JAWS_SITE_NAME: "PERLMUTTER"
  <<: *scrontab-stop
  script:
    - *check-vm-connections
    - "source ./test/integration/write_shims.sh"
    - "write_shims perlmutter"
    - "./test/integration/deploy.sh scrontab venv $JAWS_SITE_VERSION"

.dori-deployment: &dori-deploy
  stage: deploy-jaws
  tags:
    - dori
  variables:
    JAWS_SITE_NAME: "DORI"
    CONTAINER_RUNTIME: "apptainer"
  <<: *systemd-stop
  script:
    - *check-vm-connections
    - "./test/integration/deploy.sh systemd $CONTAINER_RUNTIME-run $JAWS_SITE_VERSION"
    - "./test/integration/deploy_tools/systemd.sh status"

.defiant-deployment: &defiant-deploy
  stage: deploy-jaws
  tags:
    - defiant
    - ornl
  variables:
    JAWS_SITE_NAME: "DEFIANT"
    CONTAINER_RUNTIME: "apptainer"
  <<: *supervisor-stop
  script:
    - *check-vm-connections
    - "./test/integration/deploy.sh supervisor $CONTAINER_RUNTIME-run $JAWS_SITE_VERSION"

.kbase-perlmutter-deployment:
  stage: deploy-jaws
  tags:
    - kbase
  variables:
    JAWS_SITE_NAME: "KBASE"
  <<: *scrontab-stop
  script:
    - *check-vm-connections
    - "source ./test/integration/write_shims.sh"
    - "write_shims perlmutter"
    - "./test/integration/deploy.sh scrontab venv $JAWS_SITE_VERSION"

##### End anchors and extends jobs



##### Begin jobs definitions
flake-rpc:
  <<: *shell-default
  stage: linter
  script:
    - flake8 --show-source --statistics rpc

flake-site:
  <<: *shell-default
  stage: linter
  script:
    - flake8 --show-source --statistics site

test-rpc:
  <<: *docker-default
  stage: unit-test
  script:
    - docker build -t jaws-site-rpc --target test-rpc .
    - docker run --rm -v $CI_PROJECT_DIR/rpc/coverage:/usr/app/rpc/coverage jaws-site-rpc
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: rpc.xml

test-site:
  <<: *docker-default
  stage: unit-test
  script:
    - docker build -t jaws-site --target test-site .
    - docker run --rm -v $CI_PROJECT_DIR/site/coverage:/usr/app/coverage jaws-site
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: site.xml

# generates a version file that is used by the docker/apptainer build
# most images don't have git installed so we use this in a separate job
generate-version-file:
    <<: *shell-default
    stage: image-build
    script:
      - 'git log -n 1 --pretty="commit_count:  $(git rev-list HEAD --count)%ncommit_hash:   %h%nsubject:       %s%ncommitter:     %cN <%ce>%ncommiter_date: %ci%nauthor:        %aN <%ae>%nauthor_date:   %ai%nref_names:     %D" > image_version.yml'
    artifacts:
        paths:
        - image_version.yml

build-docker-site:
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  tags:
    - docker-build
  stage: image-build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $GITLAB_IMAGE_TAG .
    - docker push $GITLAB_IMAGE_TAG
  rules:
    - if: "$CI_COMMIT_BRANCH == 'main'"
      variables:
        GITLAB_IMAGE_TAG: "$CI_REGISTRY_IMAGE:docker-latest"
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      variables:
        GITLAB_IMAGE_TAG: "$CI_REGISTRY_IMAGE:docker-$JAWS_SITE_VERSION"
    - if: "$CI_COMMIT_TAG == 'dev'"
      variables:
        GITLAB_IMAGE_TAG: "$CI_REGISTRY_IMAGE:docker-dev"
  needs:
    - job: generate-version-file
      artifacts: true

build-apptainer-site:
  tags:
    - docker-build
  image:
    name: kaczmarj/apptainer:latest
    entrypoint: [""]
  stage: image-build
  script:
    - apptainer build jaws-site-${APPTAINER_TAG}.sif jaws-site.def
    - echo "$CI_REGISTRY_PASSWORD" | apptainer remote login --username "$CI_REGISTRY_USER" --password-stdin "oras://$CI_REGISTRY"
    - apptainer push jaws-site-${APPTAINER_TAG}.sif "oras://${CI_REGISTRY_IMAGE}:${APPTAINER_TAG}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        APPTAINER_TAG: "apptainer-mr-$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_BRANCH == 'main'"
      variables:
        APPTAINER_TAG: "apptainer-latest"
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      variables:
        APPTAINER_TAG: "apptainer-$JAWS_SITE_VERSION"
    - if: "$CI_COMMIT_TAG == 'dev'"
      variables:
        APPTAINER_TAG: "apptainer-dev"
  needs:
    - job: generate-version-file
      artifacts: true

## integration tests - only run on merge request
#deploy-jaws-aws-dev:
#  extends: .aws-deployment
#  variables:
#    JAWS_DEPLOYMENT_NAME: "dev"
#    JAWS_SITE_VERSION: "dev"
#  environment:
#    name: "aws/dev"
#  rules:
#    - if: '$CI_COMMIT_TAG == "dev"'

#deploy-jaws-aws-prod:
#  extends: .aws-deployment
#  stage: release-jaws
#  variables:
#    JAWS_DEPLOYMENT_NAME: "prod"
#  environment:
#    name: "aws/prod"
#  rules:
#    - if: "$CI_COMMIT_BRANCH =~ /^release/"
#      when: manual
#    - if: $RUN_END_TO_END_PROD == 'true'

#deploy-jaws-assembly-prod:
#  stage: release-jaws
# tags:
#    - assembly-prod
#  variables:
#   JAWS_DEPLOYMENT_NAME: "prod"
#    JAWS_SITE_NAME: "ASSEMBLY"
#  environment:
#    name: "assembly/prod"
#  <<: *supervisor-stop
#  script:
#    - "./test/integration/deploy.sh supervisor venv"
#  rules:
#    - if: "$CI_COMMIT_BRANCH =~ /^release/"
#      when: manual
#    - if: $RUN_END_TO_END_PROD == 'true'

deploy-jaws-defiant-dev:
  extends: .defiant-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
    JAWS_SITE_VERSION: "dev"
  environment:
    name: "defiant/dev"
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-defiant-staging:
  extends: .defiant-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "staging"
  environment:
    name: "defiant/staging"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
  allow_failure: true

deploy-jaws-defiant-prod:
  extends: .defiant-deployment
  stage: release-jaws
  variables:
    JAWS_DEPLOYMENT_NAME: "prod"
  environment:
    name: "defiant/production"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: manual
    - if: $RUN_END_TO_END_PROD == 'true'

deploy-jaws-jgi-dev:
  extends: .jgi-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
    JAWS_SITE_VERSION: "dev"
  environment:
    name: "jgi/dev"
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-jgi-staging:
  extends: .jgi-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "staging"
  environment:
    name: "jgi/staging"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
  allow_failure: true

deploy-jaws-jgi-prod:
  extends: .jgi-deployment
  stage: release-jaws
  variables:
    JAWS_DEPLOYMENT_NAME: "prod"
  environment:
    name: "jgi/production"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: manual
    - if: $RUN_END_TO_END_PROD == 'true'

deploy-jaws-tahoma-dev:
  extends: .tahoma-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
    JAWS_SITE_VERSION: "dev"
  environment:
    name: "tahoma/dev"
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-tahoma-staging:
  extends: .tahoma-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "staging"
  environment:
    name: "tahoma/staging"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
  allow_failure: true

deploy-jaws-tahoma-prod:
  extends: .tahoma-deployment
  stage: release-jaws
  variables:
    JAWS_DEPLOYMENT_NAME: "prod"
  environment:
    name: "tahoma/prod"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: manual
    - if: $RUN_END_TO_END_PROD == 'true'

deploy-jaws-nmdc-dev:
  extends: .nmdc-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
    JAWS_SITE_VERSION: "dev"
  environment:
    name: "nmdc/dev"
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-nmdc-staging:
  extends: .nmdc-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "staging"
  environment:
    name: "nmdc/staging"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
  allow_failure: true

deploy-jaws-nmdc-prod:
  extends: .nmdc-deployment
  stage: release-jaws
  variables:
    JAWS_DEPLOYMENT_NAME: "prod"
  environment:
    name: "nmdc/production"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: manual
    - if: $RUN_END_TO_END_PROD == 'true'

deploy-jaws-kbase-dev:
  extends: .kbase-perlmutter-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
    JAWS_SITE_VERSION: "dev"
  environment:
    name: "kbase/dev"
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-kbase-staging:
  extends: .kbase-perlmutter-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "staging"
  environment:
    name: "kbase/staging"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
  allow_failure: true

deploy-jaws-kbase-prod:
    extends: .kbase-perlmutter-deployment
    stage: release-jaws
    variables:
        JAWS_DEPLOYMENT_NAME: "prod"
    environment:
        name: "kbase/production"
    when: manual

deploy-jaws-perlmutter-dev:
  extends: .perlmutter-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
    JAWS_SITE_VERSION: "dev"
  environment:
    name: "perlmutter/dev"
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-perlmutter-staging:
  extends: .perlmutter-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "staging"
  environment:
    name: "perlmutter/staging"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
  allow_failure: true

deploy-jaws-perlmutter-prod:
  extends: .perlmutter-deployment
  stage: release-jaws
  variables:
    JAWS_DEPLOYMENT_NAME: "prod"
  environment:
    name: "perlmutter/production"
  allow_failure: true
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: manual
    - if: $RUN_END_TO_END_PROD == 'true'

deploy-jaws-dori-dev:
  extends: .dori-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
    JAWS_SITE_VERSION: "dev"
  environment:
    name: "dori/dev"
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'

deploy-jaws-dori-staging:
  extends: .dori-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "staging"
  environment:
    name: "dori/staging"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
      variables:
        JAWS_SITE_VERSION: "mr-$CI_MERGE_REQUEST_IID"
    - if: $RUN_END_TO_END_STAGING == 'true'
  allow_failure: true

deploy-jaws-dori-prod:
  extends: .dori-deployment
  stage: release-jaws
  variables:
    JAWS_DEPLOYMENT_NAME: "prod"
  environment:
    name: "dori/production"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: manual
    - if: $RUN_END_TO_END_PROD == 'true'

deploy-jaws-nmdc-tahoma-prod:
  extends: .nmdc_tahoma-deployment
  stage: release-jaws
  variables:
    JAWS_DEPLOYMENT_NAME: "prod"
  environment:
    name: "nmdc-tahoma/prod"
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: manual
    - if: $RUN_END_TO_END_PROD == 'true'

deploy-jaws-nmdc-tahoma-staging:
  extends: .nmdc_tahoma-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "staging"
  environment:
    name: "nmdc-tahoma/staging"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
  allow_failure: true

deploy-jaws-nmdc-tahoma-dev:
  extends: .nmdc_tahoma-deployment
  variables:
    JAWS_DEPLOYMENT_NAME: "dev"
  environment:
    name: "nmdc-tahoma/dev"
  rules:
    - if: '$CI_COMMIT_TAG == "dev"'
