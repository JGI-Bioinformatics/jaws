<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="9" skipped="0" tests="33" time="8.220" timestamp="2021-05-24T15:54:49.036460" hostname="SSul-m69.local"><testcase classname="tests.test_cli" name="test_cli_queue" time="0.027" /><testcase classname="tests.test_cli" name="test_cli_history" time="0.015" /><testcase classname="tests.test_cli" name="test_cli_status" time="0.026" /><testcase classname="tests.test_cli" name="test_cli_metadata" time="0.064" /><testcase classname="tests.test_cli" name="test_cli_submit" time="0.406"><failure message="AssertionError: assert 1 == 0&#10; +  where 1 = &lt;Result SystemExit(WdlError('No Java runtime present, requesting install.\n'))&gt;.exit_code">configuration = ('/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_cli_submit0/jaws_client.ini', '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_cli_submit0/jaws_user.ini')
monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x10c357550&gt;, sample_workflow = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_cli_submit0'

    @pytest.mark.skipif(
        shutil.which("womtool") is None, reason="WOMTool needs to be installed."
    )
    def test_cli_submit(configuration, monkeypatch, sample_workflow):
        root = sample_workflow
    
        wdl = os.path.join(root, "workflow", "sample.wdl")
        inputs = os.path.join(root, "workflow", "sample.json")
    
        def mock_get(url, headers=None):
            if "user" in url:
                result = {"email": "joe@lbl.gov", "uid": "jdoe", "name": "John Doe"}
            else:
                result = {
                    "site_id": "CORI",
                    "globus_endpoint": "abcdeqerawr13423sdasd",
                    "globus_host_path": "/",
                    "uploads_dir": "/global/cscratch1/sd/jaws_jtm/jaws-dev/uploads",
                    "max_ram_gb": 1024,
                }
            return MockResponse(result, 200)
    
        def mock_post(url, data=None, files=None, headers={}):
            return MockResponse(
                {"run_id": "36", "site_id": "CORI", "tag": None, "output_dir": "/a/b/c"},
                201,
            )
    
        monkeypatch.setattr(requests, "get", mock_get)
        monkeypatch.setattr(requests, "post", mock_post)
    
        runner = click.testing.CliRunner()
        result = runner.invoke(cli.main, ["submit", wdl, inputs, "CORI"])
&gt;       assert result.exit_code == 0
E       AssertionError: assert 1 == 0
E        +  where 1 = &lt;Result SystemExit(WdlError('No Java runtime present, requesting install.\n'))&gt;.exit_code

tests/test_cli.py:344: AssertionError</failure></testcase><testcase classname="tests.test_cli" name="test_get" time="0.026" /><testcase classname="tests.test_cli" name="test_cancel_OK" time="0.013" /><testcase classname="tests.test_cli" name="test_cancel_ERR" time="0.029" /><testcase classname="tests.test_wfcopy" name="test_wfcopy" time="2.720" /><testcase classname="tests.test_wfcopy" name="test_wfcopy_flatten" time="2.124" /><testcase classname="tests.test_workflow" name="test_create_destination_json" time="0.013" /><testcase classname="tests.test_workflow" name="test_src_json_inputs" time="0.021" /><testcase classname="tests.test_workflow" name="test_wdl_validation" time="0.062"><failure message="jaws_client.workflow.WdlError: No Java runtime present, requesting install.">configuration = ('/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_wdl_validation0/jaws_client.ini', '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_wdl_validation0/jaws_user.ini')
simple_wdl_example = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_wdl_validation0'

    @pytest.mark.skipif(
        shutil.which("womtool") is None, reason="WOMTool needs to be installed."
    )
    def test_wdl_validation(configuration, simple_wdl_example):
        import jaws_client.workflow
        wdl = jaws_client.workflow.WdlFile(
            os.path.join(simple_wdl_example, "align.wdl"), "1234"
        )
&gt;       wdl.validate()

tests/test_workflow.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_wdl_validation0/align.wdl'

    def validate(self):
        """
        Validates the WDL file using Cromwell's womtool.
        Any syntax errors from WDL will be raised in a WdlError.
        This is a separate method and not done automatically by the constructor because subworkflows() returns
        WdlFile objects and we wish to avoid running womtool multiple times unnecessarily.
        :return:
        """
        logger = logging.getLogger(__package__)
        logger.debug(f"Validating WDL, {self.file_location}")
        stdout, stderr = womtool("validate", "-l", self.file_location)
        self._set_subworkflows(stdout)
        if stderr:
            self._check_missing_subworkflow_msg(stderr)
&gt;           raise WdlError(stderr)
E           jaws_client.workflow.WdlError: No Java runtime present, requesting install.

jaws_client/workflow.py:251: WdlError</failure></testcase><testcase classname="tests.test_workflow" name="test_wdl_validation_with_no_subworkflows" time="0.069" /><testcase classname="tests.test_workflow" name="test_bad_syntax_wdl" time="0.080" /><testcase classname="tests.test_workflow" name="test_wdl_subworkflows" time="0.078"><failure message="jaws_client.workflow.WdlError: No Java runtime present, requesting install.">configuration = ('/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_wdl_subworkflows0/jaws_client..../private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_wdl_subworkflows0/jaws_user.ini')
subworkflows_example = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_wdl_subworkflows0'

    @pytest.mark.skipif(
        shutil.which("womtool") is None, reason="WOMTool needs to be installed."
    )
    def test_wdl_subworkflows(configuration, subworkflows_example):
        basedir = subworkflows_example
        import jaws_client.workflow
        wdl = jaws_client.workflow.WdlFile(os.path.join(basedir, "main.wdl"), "1234")
        sub1 = os.path.join(basedir, "sub1.wdl")
        sub2 = os.path.join(basedir, "sub2.wdl")
    
        subworkflows = [
            jaws_client.workflow.WdlFile(sub1, "1234"),
            jaws_client.workflow.WdlFile(sub2, "1234"),
        ]
    
&gt;       assert len(wdl.subworkflows) == 2

tests/test_workflow.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
jaws_client/workflow.py:225: in subworkflows
    self.validate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_wdl_subworkflows0/main.wdl'

    def validate(self):
        """
        Validates the WDL file using Cromwell's womtool.
        Any syntax errors from WDL will be raised in a WdlError.
        This is a separate method and not done automatically by the constructor because subworkflows() returns
        WdlFile objects and we wish to avoid running womtool multiple times unnecessarily.
        :return:
        """
        logger = logging.getLogger(__package__)
        logger.debug(f"Validating WDL, {self.file_location}")
        stdout, stderr = womtool("validate", "-l", self.file_location)
        self._set_subworkflows(stdout)
        if stderr:
            self._check_missing_subworkflow_msg(stderr)
&gt;           raise WdlError(stderr)
E           jaws_client.workflow.WdlError: No Java runtime present, requesting install.

jaws_client/workflow.py:251: WdlError</failure></testcase><testcase classname="tests.test_workflow" name="test_calculate_wdl_max_ram_gb" time="0.073"><failure message="jaws_client.workflow.WdlError: No Java runtime present, requesting install.">configuration = ('/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_calculate_wdl_max_ram_gb0/jaws.../var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_calculate_wdl_max_ram_gb0/jaws_user.ini')
dap_seq_example = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_calculate_wdl_max_ram_gb0'

    @pytest.mark.skipif(
        shutil.which("womtool") is None, reason="WOMTool needs to be installed"
    )
    def test_calculate_wdl_max_ram_gb(configuration, dap_seq_example):
        import jaws_client.workflow
        wdl = jaws_client.workflow.WdlFile(
            os.path.join(dap_seq_example, "test.wdl"), "1234"
        )
&gt;       assert 5 == wdl.max_ram_gb

tests/test_workflow.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
jaws_client/workflow.py:297: in max_ram_gb
    for subworkflow_file in self.subworkflows:
jaws_client/workflow.py:225: in subworkflows
    self.validate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_calculate_wdl_max_ram_gb0/test.wdl'

    def validate(self):
        """
        Validates the WDL file using Cromwell's womtool.
        Any syntax errors from WDL will be raised in a WdlError.
        This is a separate method and not done automatically by the constructor because subworkflows() returns
        WdlFile objects and we wish to avoid running womtool multiple times unnecessarily.
        :return:
        """
        logger = logging.getLogger(__package__)
        logger.debug(f"Validating WDL, {self.file_location}")
        stdout, stderr = womtool("validate", "-l", self.file_location)
        self._set_subworkflows(stdout)
        if stderr:
            self._check_missing_subworkflow_msg(stderr)
&gt;           raise WdlError(stderr)
E           jaws_client.workflow.WdlError: No Java runtime present, requesting install.

jaws_client/workflow.py:251: WdlError</failure></testcase><testcase classname="tests.test_workflow" name="test_calculate_wdl_max_ram_gb_warn_on_mem_keyword" time="0.025" /><testcase classname="tests.test_workflow" name="test_calculate_wdl_max_ram_gb_with_subworkflows" time="0.080"><failure message="jaws_client.workflow.WdlError: No Java runtime present, requesting install.">configuration = ('/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_calculate_wdl_max_ram_gb_1/jaw...var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_calculate_wdl_max_ram_gb_1/jaws_user.ini')
subworkflows_example = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_calculate_wdl_max_ram_gb_1'

    @pytest.mark.skipif(
        shutil.which("womtool") is None, reason="WOMTool needs to be installed."
    )
    def test_calculate_wdl_max_ram_gb_with_subworkflows(
        configuration, subworkflows_example
    ):
        import jaws_client.workflow
        wdl = jaws_client.workflow.WdlFile(
            os.path.join(subworkflows_example, "main.wdl"), "1234"
        )
&gt;       assert 6 == wdl.max_ram_gb

tests/test_workflow.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
jaws_client/workflow.py:297: in max_ram_gb
    for subworkflow_file in self.subworkflows:
jaws_client/workflow.py:225: in subworkflows
    self.validate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_calculate_wdl_max_ram_gb_1/main.wdl'

    def validate(self):
        """
        Validates the WDL file using Cromwell's womtool.
        Any syntax errors from WDL will be raised in a WdlError.
        This is a separate method and not done automatically by the constructor because subworkflows() returns
        WdlFile objects and we wish to avoid running womtool multiple times unnecessarily.
        :return:
        """
        logger = logging.getLogger(__package__)
        logger.debug(f"Validating WDL, {self.file_location}")
        stdout, stderr = womtool("validate", "-l", self.file_location)
        self._set_subworkflows(stdout)
        if stderr:
            self._check_missing_subworkflow_msg(stderr)
&gt;           raise WdlError(stderr)
E           jaws_client.workflow.WdlError: No Java runtime present, requesting install.

jaws_client/workflow.py:251: WdlError</failure></testcase><testcase classname="tests.test_workflow" name="test_appropriate_staging_dir_for_all_wdls" time="0.067"><failure message="jaws_client.workflow.WdlError: No Java runtime present, requesting install.">configuration = ('/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_appropriate_staging_dir_f0/jaw...var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_appropriate_staging_dir_f0/jaws_user.ini')
subworkflows_example = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_appropriate_staging_dir_f0'

    @pytest.mark.skipif(
        shutil.which("womtool") is None, reason="WOMTool needs to be installed."
    )
    def test_appropriate_staging_dir_for_all_wdls(configuration, subworkflows_example):
        basedir = subworkflows_example
        staging = os.path.join(basedir, "staging")
        os.mkdir(staging)
    
        import jaws_client.workflow
        wdl = jaws_client.workflow.WdlFile(os.path.join(basedir, "main.wdl"), "1234")
    
        new_wdl_path = os.path.join(staging, wdl.name)
        wdl.copy_to(new_wdl_path)
    
        assert staging not in wdl.file_location
        assert os.path.exists(os.path.join(staging, wdl.name))
    
        zip_path = os.path.join(staging, wdl.submission_id)
        os.mkdir(zip_path)
    
&gt;       for sub in wdl.subworkflows:

tests/test_workflow.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
jaws_client/workflow.py:225: in subworkflows
    self.validate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_appropriate_staging_dir_f0/main.wdl'

    def validate(self):
        """
        Validates the WDL file using Cromwell's womtool.
        Any syntax errors from WDL will be raised in a WdlError.
        This is a separate method and not done automatically by the constructor because subworkflows() returns
        WdlFile objects and we wish to avoid running womtool multiple times unnecessarily.
        :return:
        """
        logger = logging.getLogger(__package__)
        logger.debug(f"Validating WDL, {self.file_location}")
        stdout, stderr = womtool("validate", "-l", self.file_location)
        self._set_subworkflows(stdout)
        if stderr:
            self._check_missing_subworkflow_msg(stderr)
&gt;           raise WdlError(stderr)
E           jaws_client.workflow.WdlError: No Java runtime present, requesting install.

jaws_client/workflow.py:251: WdlError</failure></testcase><testcase classname="tests.test_workflow" name="test_fail_invalid_backend" time="0.009" /><testcase classname="tests.test_workflow" name="test_move_input_files_to_destination" time="0.171" /><testcase classname="tests.test_workflow" name="test_zipping_up_of_subworkflow_files" time="0.062"><failure message="jaws_client.workflow.WdlError: No Java runtime present, requesting install.">configuration = ('/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_zipping_up_of_subworkflow0/jaw...var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_zipping_up_of_subworkflow0/jaws_user.ini')
subworkflows_example = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_zipping_up_of_subworkflow0'

    @pytest.mark.skipif(
        shutil.which("womtool") is None, reason="WOMTool needs to be installed."
    )
    def test_zipping_up_of_subworkflow_files(configuration, subworkflows_example):
        basedir = subworkflows_example
        staging_dir = os.path.join(basedir, "staging")
        import jaws_client.workflow
        wdl = jaws_client.workflow.WdlFile(os.path.join(basedir, "main.wdl"), "1234")
&gt;       staged_wdl, zip_file = wdl.compress_wdls(staging_dir)

tests/test_workflow.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
jaws_client/workflow.py:352: in compress_wdls
    if not len(self.subworkflows):
jaws_client/workflow.py:225: in subworkflows
    self.validate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_zipping_up_of_subworkflow0/main.wdl'

    def validate(self):
        """
        Validates the WDL file using Cromwell's womtool.
        Any syntax errors from WDL will be raised in a WdlError.
        This is a separate method and not done automatically by the constructor because subworkflows() returns
        WdlFile objects and we wish to avoid running womtool multiple times unnecessarily.
        :return:
        """
        logger = logging.getLogger(__package__)
        logger.debug(f"Validating WDL, {self.file_location}")
        stdout, stderr = womtool("validate", "-l", self.file_location)
        self._set_subworkflows(stdout)
        if stderr:
            self._check_missing_subworkflow_msg(stderr)
&gt;           raise WdlError(stderr)
E           jaws_client.workflow.WdlError: No Java runtime present, requesting install.

jaws_client/workflow.py:251: WdlError</failure></testcase><testcase classname="tests.test_workflow" name="test_no_zip_file_in_manifest_if_no_subworkflows" time="0.065"><failure message="jaws_client.workflow.WdlError: No Java runtime present, requesting install.">simple_wdl_example = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_no_zip_file_in_manifest_i0'

    def test_no_zip_file_in_manifest_if_no_subworkflows(simple_wdl_example):
        basedir = simple_wdl_example
        staging_dir = os.path.join(basedir, "staging")
        compute_dir = os.path.join(basedir, "compute")
    
        import jaws_client.workflow
        wdl = jaws_client.workflow.WdlFile(os.path.join(basedir, "align.wdl"), "1234")
&gt;       staged_wdl, zip_file = wdl.compress_wdls(basedir)

tests/test_workflow.py:203: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
jaws_client/workflow.py:352: in compress_wdls
    if not len(self.subworkflows):
jaws_client/workflow.py:225: in subworkflows
    self.validate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_no_zip_file_in_manifest_i0/align.wdl'

    def validate(self):
        """
        Validates the WDL file using Cromwell's womtool.
        Any syntax errors from WDL will be raised in a WdlError.
        This is a separate method and not done automatically by the constructor because subworkflows() returns
        WdlFile objects and we wish to avoid running womtool multiple times unnecessarily.
        :return:
        """
        logger = logging.getLogger(__package__)
        logger.debug(f"Validating WDL, {self.file_location}")
        stdout, stderr = womtool("validate", "-l", self.file_location)
        self._set_subworkflows(stdout)
        if stderr:
            self._check_missing_subworkflow_msg(stderr)
&gt;           raise WdlError(stderr)
E           jaws_client.workflow.WdlError: No Java runtime present, requesting install.

jaws_client/workflow.py:251: WdlError</failure></testcase><testcase classname="tests.test_workflow" name="test_manifest_file" time="0.004" /><testcase classname="tests.test_workflow" name="test_same_submission_id_in_workflow_files" time="0.066"><failure message="jaws_client.workflow.WdlError: No Java runtime present, requesting install.">subworkflows_example = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_same_submission_id_in_wor0'

    @pytest.mark.skipif(
        shutil.which("womtool") is None, reason="WOMTool needs to be installed."
    )
    def test_same_submission_id_in_workflow_files(subworkflows_example):
        submission_id = "1234567890"
        wdl_file = os.path.join(subworkflows_example, "main.wdl")
        import jaws_client.workflow
        wdl = jaws_client.workflow.WdlFile(wdl_file, submission_id)
        zip_path = os.path.join(subworkflows_example, "zip_directory")
&gt;       zip_wdl, _ = wdl.compress_wdls(zip_path)

tests/test_workflow.py:244: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
jaws_client/workflow.py:352: in compress_wdls
    if not len(self.subworkflows):
jaws_client/workflow.py:225: in subworkflows
    self.validate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = '/private/var/folders/39/vj286mjx5d31hyc_m795n5p80000gq/T/pytest-of-SSul/pytest-2/test_same_submission_id_in_wor0/main.wdl'

    def validate(self):
        """
        Validates the WDL file using Cromwell's womtool.
        Any syntax errors from WDL will be raised in a WdlError.
        This is a separate method and not done automatically by the constructor because subworkflows() returns
        WdlFile objects and we wish to avoid running womtool multiple times unnecessarily.
        :return:
        """
        logger = logging.getLogger(__package__)
        logger.debug(f"Validating WDL, {self.file_location}")
        stdout, stderr = womtool("validate", "-l", self.file_location)
        self._set_subworkflows(stdout)
        if stderr:
            self._check_missing_subworkflow_msg(stderr)
&gt;           raise WdlError(stderr)
E           jaws_client.workflow.WdlError: No Java runtime present, requesting install.

jaws_client/workflow.py:251: WdlError</failure></testcase><testcase classname="tests.test_workflow" name="test_refdata_not_translated" time="0.008" /><testcase classname="tests.test_workflow" name="test_refdata_in_different_form" time="0.007" /><testcase classname="tests.test_workflow" name="test_refdata_in_inputs_json" time="0.021" /><testcase classname="tests.test_workflow" name="test_rel_path_in_input_files" time="0.003" /><testcase classname="tests.test_workflow" name="test_nested_files_are_in_src_file_inputs" time="0.003" /><testcase classname="tests.test_workflow" name="test_looks_like_file_path" time="0.001" /><testcase classname="tests.test_workflow" name="test_rsync_excludes" time="0.055" /></testsuite></testsuites>