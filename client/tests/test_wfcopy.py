import os
import shutil
import tempfile

from jaws_client import wfcopy

# Mockup folders and files generated by a cromwell workflow run, including nested subworkflows
cromwell_outputs = [
    "call-runBlastNoshard/blast.runblastplus/4a1/call-runBlast/execution/refseq.bacteria.parsed",
    "call-runBlastNoshard/blast.runblastplus/4a1/call-runBlast/runblastplus2/blast.runblastplus2/4b2/call-runBlast2/shard-0/execution/refseq.fungi.parsed", # noqa
    "call-runBlastNoshard/blast.runblastplus/4a1/call-runBlast/runblastplus2/blast.runblastplus2/4b2/call-runBlast2/shard-1/execution/refseq.archaea.parsed", # noqa
    "call-runBlastNoshard/blast.runblastplus/4a1/call-runBlast/runblastplus2/blast.runblastplus2/4b2/call-runBlast3/execution/refseq.bacteria.parsed", # noqa
    "call-runBlastNoshard/blast.runblastplus/4a1/call-runBlast/runblastplus2/blast.runblastplus2/4b2/call-runBlast4/execution/refseq.meta.parsed", # noqa
    "call-bbmap_shard_wf/align.bbmap_shard_wf/2b/call-merge_bams/execution/merged.sorted.bam",  # noqa
    "call-bbmap_shard_wf/align.bbmap_shard_wf/2b/call-alignment/shard-0/execution/sample1.sam",  # noqa
    "call-bbmap_shard_wf/align.bbmap_shard_wf/2b/call-alignment/shard-1/execution/sample2.sam",  # noqa
    "call-runBlastShard/shard-0/execution/refseq.bacteria.parsed",
    "call-runBlastShard/shard-1/execution/refseq.mito.parsed",
    "call-runSpades/execution/scaffolds.fasta",
    "call-runSpades/execution/contigs.fasta",
]


# Cromwell files created in each task directory
cromwell_files = [
    "script",
    "script.submit",
    "stdout",
    "stderr",
    "rc",
]

# Folders and files created by wfcopy
wfcopy_outputs = [
    "runBlastNoshard/runBlast/refseq.bacteria.parsed",
    "runBlastNoshard/runBlast2/shard-0/refseq.fungi.parsed",
    "runBlastNoshard/runBlast2/shard-1/refseq.archaea.parsed",
    "runBlastNoshard/runBlast3/refseq.bacteria.parsed",
    "runBlastNoshard/runBlast4/refseq.meta.parsed",
    "runBlastShard/shard-0/refseq.bacteria.parsed",
    "runBlastShard/shard-1/refseq.mito.parsed",
    "bbmap_shard_wf/alignment/shard-0/sample1.sam",
    "bbmap_shard_wf/alignment/shard-1/sample2.sam",
    "bbmap_shard_wf/merge_bams/merged.sorted.bam",
    "runSpades/scaffolds.fasta",
    "runSpades/contigs.fasta",
    "log/runBlastNoshard.runBlast.script",
    "log/runBlastNoshard.runBlast.script.submit",
    "log/runBlastNoshard.runBlast.stdout",
    "log/runBlastNoshard.runBlast.stderr",
    "log/runBlastNoshard.runBlast2.shard-0.script",
    "log/runBlastNoshard.runBlast2.shard-0.script.submit",
    "log/runBlastNoshard.runBlast2.shard-0.stderr",
    "log/runBlastNoshard.runBlast2.shard-0.stdout",
    "log/runBlastNoshard.runBlast2.shard-1.script",
    "log/runBlastNoshard.runBlast2.shard-1.script.submit",
    "log/runBlastNoshard.runBlast2.shard-1.stderr",
    "log/runBlastNoshard.runBlast2.shard-1.stdout",
    "log/runBlastNoshard.runBlast3.script",
    "log/runBlastNoshard.runBlast3.script.submit",
    "log/runBlastNoshard.runBlast3.stdout",
    "log/runBlastNoshard.runBlast3.stderr",
    "log/runBlastNoshard.runBlast4.script",
    "log/runBlastNoshard.runBlast4.script.submit",
    "log/runBlastNoshard.runBlast4.stdout",
    "log/runBlastNoshard.runBlast4.stderr",
    "log/runBlastShard.shard-0.script",
    "log/runBlastShard.shard-0.script.submit",
    "log/runBlastShard.shard-0.stderr",
    "log/runBlastShard.shard-0.stdout",
    "log/runBlastShard.shard-1.script",
    "log/runBlastShard.shard-1.stderr",
    "log/runBlastShard.shard-1.stdout",
    "log/runSpades.script",
    "log/runSpades.script.submit",
    "log/runSpades.stderr",
    "log/runSpades.stdout",
    "log/workflow.rc",
]

# Folders and files created by wfcopy with flatten option
wfcopy_flatten_outputs = [
    "runBlastNoshard/runBlast/refseq.bacteria.parsed",
    "runBlastNoshard/runBlast2/refseq.fungi.parsed",
    "runBlastNoshard/runBlast2/refseq.archaea.parsed",
    "runBlastNoshard/runBlast3/refseq.bacteria.parsed",
    "runBlastNoshard/runBlast4/refseq.meta.parsed",
    "runBlastShard/refseq.bacteria.parsed",
    "runBlastShard/refseq.mito.parsed",
    "bbmap_shard_wf/merge_bams/merged.sorted.bam",
    "bbmap_shard_wf/alignment/sample1.sam",
    "bbmap_shard_wf/alignment/sample2.sam",
    "runSpades/scaffolds.fasta",
    "runSpades/contigs.fasta",
    "log/runBlastNoshard.runBlast.script",
    "log/runBlastNoshard.runBlast.script.submit",
    "log/runBlastNoshard.runBlast.stdout",
    "log/runBlastNoshard.runBlast.stderr",
    "log/runBlastNoshard.runBlast2.script",
    "log/runBlastNoshard.runBlast2.script.submit",
    "log/runBlastNoshard.runBlast2.stderr",
    "log/runBlastNoshard.runBlast2.stdout",
    "log/runBlastNoshard.runBlast2.script",
    "log/runBlastNoshard.runBlast2.script.submit",
    "log/runBlastNoshard.runBlast2.stderr",
    "log/runBlastNoshard.runBlast2.stdout",
    "log/runBlastNoshard.runBlast3.script",
    "log/runBlastNoshard.runBlast3.script.submit",
    "log/runBlastNoshard.runBlast3.stdout",
    "log/runBlastNoshard.runBlast3.stderr",
    "log/runBlastNoshard.runBlast4.script",
    "log/runBlastNoshard.runBlast4.script.submit",
    "log/runBlastNoshard.runBlast4.stdout",
    "log/runBlastNoshard.runBlast4.stderr",
    "log/runBlastShard.script",
    "log/runBlastShard.script.submit",
    "log/runBlastShard.stderr",
    "log/runBlastShard.stdout",
    "log/runBlastShard.script",
    "log/runBlastShard.stderr",
    "log/runBlastShard.stdout",
    "log/runSpades.script",
    "log/runSpades.script.submit",
    "log/runSpades.stderr",
    "log/runSpades.stdout",
    "log/workflow.rc",
]

cromwell_root_dir = tempfile.mkdtemp(prefix="cromwell_")
wfcopy_root_dir = tempfile.mkdtemp(prefix="wfcopy_")


def setup_module():
    print("setup ...")
    print(f"cromwell_root_dir={cromwell_root_dir}")
    for filename in cromwell_outputs:
        fullname = os.path.join(cromwell_root_dir, filename)
        filepath = os.path.dirname(fullname)

        # make cromwell dir
        if not os.path.isdir(filepath):
            os.makedirs(filepath)

        # add task file in cromwell dir
        with open(fullname, "w") as fh:
            fh.write("test")

        # add cromwell script files in cromwell dir
        for srcfile in cromwell_files:
            fullname = os.path.join(filepath, srcfile)
            with open(fullname, "w") as fh:
                fh.write("test")

    # add absolute symlinks for testing
    abs_crfile = os.path.join(cromwell_root_dir, "call-runSpades/execution/scaffolds.fasta")
    abs_symlink = os.path.join(cromwell_root_dir, "call-runSpades/execution/scaffolds_hardln.fasta")
    os.symlink(abs_crfile, abs_symlink)

    # add relative symlinks for testing
    cwd = os.getcwd()
    os.chdir(os.path.join(cromwell_root_dir, "call-runSpades/execution"))
    rel_srcfile = os.path.join("./contigs.fasta")
    rel_symlink = "./contigs_softln.fasta"
    os.symlink(rel_srcfile, rel_symlink)
    os.chdir(cwd)


def teardown_module():
    print("teardown ...")
    print("remove %s" % cromwell_root_dir)
    shutil.rmtree(cromwell_root_dir)


def teardown_function():
    print("teardown ...")
    print("remove %s" % wfcopy_root_dir)
    shutil.rmtree(wfcopy_root_dir)


def test_wfcopy():
    print("testing ...")
    print(f"wfcopy_root_dir={wfcopy_root_dir}")

    # Transform cromwell dir to wfcopy format
    dest_dir = os.path.join(wfcopy_root_dir, "wfcopy_output")
    wfcopy.wfcopy(cromwell_root_dir, dest_dir)

    # look for task files
    for filename in wfcopy_outputs:
        fullname = os.path.join(dest_dir, filename)
        assert os.path.isfile(fullname)

    # check symlink files
    assert os.path.islink(os.path.join(dest_dir, "runSpades/contigs_softln.fasta"))
    assert not os.path.islink(os.path.join(dest_dir, "runSpades/scaffolds_softln.fasta"))


def test_wfcopy_flatten():
    print("testing with flatten_shard_dir ...")
    print(f"wfcopy_root_dir={wfcopy_root_dir}")

    # Transform cromwell dir to wfcopy format
    dest_dir = os.path.join(wfcopy_root_dir, "wfcopy_output")
    wfcopy.wfcopy(cromwell_root_dir, dest_dir, flatten_shard_dir=True)

    # look for task files
    for filename in wfcopy_flatten_outputs:
        fullname = os.path.join(dest_dir, filename)
        assert os.path.isfile(fullname)

    # check symlink files
    assert os.path.islink(os.path.join(dest_dir, "runSpades/contigs_softln.fasta"))
    assert not os.path.islink(os.path.join(dest_dir, "runSpades/scaffolds_softln.fasta"))
