"""
JAWS CLI
"""

import sys
import click
import json
from jaws_client import deprecated


jaws_client = None


def _print_json(j):
    click.echo(json.dumps(j, indent=4, sort_keys=True))


@click.group(context_settings={"help_option_names": ["-h", "--help"]})
@click.option("--config", "jaws_config_file", default=None, help="JAWS config file")
@click.option("--user", "user_config_file", default=None, help="User config file")
@click.option("--log", "log_file", default=None, help="Log file")
@click.option(
    "--log-level",
    "log_level",
    default="INFO",
    help="Logging level [debug|info|warning|error|critical]",
)
def main(jaws_config_file: str, user_config_file: str, log_file: str, log_level: str):
    """JGI Analysis Workflows Service"""
    global jaws_client
    try:
        jaws_client = JawsClient(jaws_config_file, user_config_file, log_file, log_level)
    except Exception as error:
        sys.exit(error)


@main.command()
def health() -> None:
    """Current system status."""
    try:
        result = jaws_client.health()
    except Exception as error:
        sys.exit(error)
    _print_json(result)


@main.command()
def info() -> None:
    """JAWS version and info."""
    try:
        result = jaws_client.info()
    except Exception as error:
        sys.exit(error)
    _print_json(result)


@main.command()
@click.argument("src_dir")
@click.argument("dest_dir")
@click.option("--flatten", is_flag=True, default=False, help="Flatten shard dirs")
def wfcopy(src_dir: str, dest_dir: str, flatten) -> None:
    """Simplify Cromwell output."""
    try:
        wfc.wfcopy(src_dir, dest_dir, flatten)
    except Exception as error:
        sys.exit(error)


@main.command()
@click.option(
    "--site", default="ALL", help="limit results to this compute-site; default=all"
)
def queue(site: str) -> None:
    """List of user's current runs"""
    try:
        result = jaws_client.queue(site)
    except Exception as error:
        sys.exit(error)
    _print_json(result)


@main.command()
@click.option("--days", default=1, help="history going back this many days; default=1")
@click.option(
    "--site", default="ALL", help="limit results to this compute-site; default=all"
)
@click.option(
    "--result", default="any", help="limit results to this result; default=any"
)
def history(days: int, site: str, result: str) -> None:
    """Print a list of the user's past runs."""
    try:
        result = jaws_client.history(days, site, result)
    except Exception as error:
        sys.exit(error)
    _print_json(result)


@main.command()
@click.argument("run_id")
@click.option("--verbose", is_flag=True, help="Return all fields")
def status(run_id: int, verbose: bool) -> None:
    """Print the current status of a run."""
    try:
        result = jaws_client.status(run_id, verbose)
    except Exception as error:
        sys.exit(error)
    _print_json(result)


@main.command()
@click.argument("run_id")
@click.option("--fmt", default="text", help="the desired output format: [text|json]")
def task_status(run_id: int, fmt: str) -> None:
    """Show the current status of each Task."""
    try:
        result = jaws_client.task_status(run_id)
    except Exception as error:
        sys.exit(error)
    if fmt == "json":
        _print_json(result)
    else:
        click.echo(
            "#CROMWELL_RUN_ID\tTASK_NAME\tATTEMPT\tCROMWELL_JOB_ID\tSTATUS_FROM\tSTATUS_TO\tTIMESTAMP\tREASON"
        )
        for row in result:
            row[2] = str(row[2])
            row[3] = str(row[3])
            click.echo("\t".join(row))


@main.command()
@click.argument("run_id")
def metadata(run_id: int) -> None:
    """Print detailed metadata for a run, generated by cromwell."""
    try:
        result = jaws_client.metadata(run_id)
    except Exception as error:
        sys.exit(error)
    _print_json(result)


@main.command()
@click.argument("run_id")
@click.option(
    "--fmt", default="text", help="the desired output format: [text|json|tab]"
)
def log(run_id: int, fmt: str) -> None:
    """View the log of Run state transitions for the workflow as a whole."""
    try:
        result = jaws_client.log(run_id)
    except Exception as error:
        sys.exit(error)
    header = ["#STATUS_FROM", "STATUS_TO", "TIMESTAMP", "REASON"]
    if fmt == "json":
        _print_json(result)
    elif fmt == "tab":
        click.echo("\t".join(header))
        for log_entry in result:
            click.echo("\t".join(log_entry))
    else:
        result.insert(0, header)
        col_widths = []
        """Get the max length of element in every col and add padding (2)"""
        for idx in range(len(header)):
            col_widths.append(max(len(log_entry[idx]) for log_entry in result) + 2)
        for log_entry in result:
            print(
                "".join(
                    cell.ljust(col_widths[col_idx])
                    for col_idx, cell in enumerate(log_entry)
                )
            )


@main.command()
@click.argument("run_id")
@click.option("--fmt", default="text", help="the desired output format: [text|json]")
def task_log(run_id: int, fmt: str) -> None:
    """Get log of each Task's state transitions."""
    try:
        result = jaws_client.task_log(run_id)
    except Exception as error:
        sys.exit(error)
    if fmt == "json":
        _print_json(result)
    else:
        click.echo(
            "#CROMWELL_RUN_ID\tTASK_NAME\tATTEMPT\tCROMWELL_JOB_ID\tSTATUS_FROM\tSTATUS_TO\tTIMESTAMP\tREASON"
        )
        for row in result:
            row[2] = str(row[2])
            row[3] = str(row[3])
            click.echo("\t".join(row))


@main.command()
@click.argument("run_id")
def errors(run_id: int) -> None:
    """View error messages and stderr for failed Tasks."""
    try:
        result = jaws_client.errors(run_id)
    except Exception as error:
        sys.exit(error)
    _print_json(result)


@main.command()
@click.argument("run_id")
def cancel(run_id):
    """Cancel a run; prints whether aborting was successful or not."""
    try:
        result = jaws_client.cancel(run_id)
    except Exception as error:
        sys.exit(error)
    _print_json(result)


@main.command()
def cancel_all():
    """Cancel all active runs."""
    try:
        result = jaws_client.cancel_all()
    except Exception as error:
        sys.exit(error)
    _print_json(result)


@main.command()
def list_sites() -> None:
    """List available compute Sites"""
    try:
        result = jaws_client.list_sites()
    except Exception as error:
        sys.exit(error)
    _print_json(result)


@main.command()
@click.argument("wdl_file", nargs=1)
@click.argument("json_file", nargs=1)
@click.argument("site", nargs=1)
@click.option("--tag", help="identifier for the run")
@click.option("--no-cache", is_flag=True, help="Disable call-caching for this run")
def submit(wdl_file: str, json_file: str, site: str, tag: str, no_cache: bool):
    """Submit a run for execution at a JAWS-Site.
    Available sites can be found by running 'jaws run list-sites'.
    """
    try:
        result = jaws_client.submit(wdl_file, json_file, site, tag, no_cache)
    except Exception as error:
        sys.exit(error)
    _print_json(result)


@main.command()
@click.argument("wdl_file", nargs=1)
def inputs(wdl_file: str) -> None:
    """Generate inputs template (JSON) from workflow (WDL) file."""
    try:
        result = jaws_client.inputs(wdl_file)
    except Exception as error:
        sys.exit(error)
    _print_json(result)


@main.command()
@click.argument("wdl_file", nargs=1)
def validate(wdl_file: str) -> None:
    """Validate a WDL using Cromwell's WOMTool."""
    try:
        jaws_client.validate(wdl_file)
    except Exception as error:
        sys.exit(error)
    else:
        click.echo("Workflow is OK")


@main.command()
@click.argument("run_id")
@click.argument("dest")
def get(run_id: int, dest: str) -> None:
    """Copy the output of a run to the specified folder."""
    try:
        jaws_client.get(run_id, dest)
    except Exception as error:
        sys.exit(error)


def _utc_to_local(utc_datetime):
    """Convert UTC time to the local time zone. This should handle daylight savings.
       Param:: utc_datetime: a string of date and time "2021-07-06 11:15:17".
    """
    from datetime import datetime, timezone
    import pytz

    # The timezone can be overwritten with a environmental variable.
    # JAWS_TZ should be set to a timezone in a similar format to 'US/Pacific'
    local_tz = os.environ.get("JAWS_TZ", None)
    local_tz_obj = ''
    if local_tz is None:
        local_tz_obj = datetime.now().astimezone().tzinfo
    else:
        local_tz_obj = pytz.timezone(local_tz)

    fmt = "%Y-%m-%d %H:%M:%S"
    datetime_obj = datetime.strptime(utc_datetime, fmt)
    return datetime_obj.replace(tzinfo=timezone.utc).astimezone(tz=local_tz_obj).strftime(fmt)


@main.command()
@click.argument("uid")
@click.argument("email")
@click.argument("name")
@click.option("--admin", is_flag=True, default=False, help="Grant admin access")
def add_user(uid: str, email: str, name: str, admin: bool) -> None:
    """Add new user and get JAWS OAuth access token (restricted)."""
    try:
        result = jaws_client.add_user(uid, email, name, admin)
    except Exception as error:
        sys.exit(error)
    _print_json(result)


def jaws():
    """Entrypoint for jaws-client app."""
    main.add_command(deprecated.run)
    main()
