"""
Class representing a task.

Tasks are generated by Cromwell and added to the priority queue.
The daemon shall assign tasks to workers.  Workers are managed by the Workforce.
"""

import logging
import sqlalchemy.exc
from sqlalchemy.exc import SQLAlchemyError
import collections
from datetime import datetime
import os
import re
import globus_sdk
from jaws_site import config
from jaws_site.cromwell import Cromwell
from jaws_site import db


# config and logging must be initialized before importing this module
cromwell = Cromwell(config.conf.get("CROMWELL", "url"))
logger = logging.getLogger(__package__)

# constants
task_status_msg = {
    "ready": "The job has been prepared by Cromwell and submitted to JTM",
    "queued": "The job was received by JTM-manager and sent to JTM-worker",
    "pending": "The job was receive by JTM-worker and is awaiting resources",
    "running": "The job is currently executing",
    "success": "The job completed successfully",
    "failed": "The job has failed",
    "outofresource": "The job exceeeded the reserved RAM; increase the amount in the WDL and rerun",
    "terminated": "The run was terminated",
    "invalidtask": "The task definition in the message from jtm_submit is not valid",
    "timeout": "The worker timed out",
    "lostconnection": "The manager lost connection with the worker",
}


class DatabaseError(Exception):
    pass


class Task:
    def __init__(self, session=None, **kwargs):

        if session:
            self.session = session
        else:
            self.session = db.Session()

        if "task_id" in kwargs:
            # load existing task
            self.task_id = task_id
            self.__load__()
            return

        # new task

        # get run_id from run-service
        run_service = api.run_service.RunService()  # TODO
        run_info = run_service.get_run(cromwell_run_id=cromwell_run_id)  # TODO

        # upsert run into db with priority
        run = db.Run(
            id=run_info.id,
            priority=run_info.priority, # TODO ADD TO RUN
        )

        # insert row into database
        task = db.Task(
            run_id=run.id,
            cromwell_run_id=cromwell_run_id,
            # TODO
        )
        self.session.add(task)
        self.task_id = task.id
        self.data = task

        # add to priority-queue
        queue = jaws_task.api.queue.PriorityQueue(self.session)
        queue.add(self)

    def __load__(self):
        """
        Load existing task record from db.
        """
        try:
            task = self.session.query.get(db.Task.task_id=self.task_id)
        except Exception:
            raise
        self.task_id = task.id
        self.data = task

    # WHO USES THIS?
    def get_task(self):
        """
        Return task info as dict.
        """
        # TODO ANYTHING ELSE?
        result = {
            "task_id": self.task_id,
            "status": self.data.status,
            "timestamp": self.data.timestamp
        }
        return result

    def update(self, task_id, status_from, status_to, timestamp, reason=""):
        """
        Add an entry to the task_log and update the task's current status.
        This is used by the jaws-worker whenever a task has completed or failed.
        """
        logger.debug(f"Task {self.task_id} is {status_to}")

        # UPDATE TASK
        self.data.status = status_to
        self.data.timestamp = timestamp

        # INSERT LOG ENTRY
        try:
            log = db.Task_Log(
                task_id=task_id,
                status_from=status_from,
                status_to=status_to,
                timestamp=timestamp,
                reason=reason,
            )
            session.add(log)
        except Exception as error:
            session.rollback()
            raise DatabaseError(f"{error}")
        session.commit()
        session.close()

        # if task is complete, transfer task output via Globus
        if status_to == "success" or status_to == "failure":
            # TODO
            # GET WHAT INFO FROM WHERE?

            # transfer to site for cromwell
            self.__transfer_folder(label, src_dir, site_endpoint, site_task_dir)

            # transfer to user outdir
            self.__transfer_folder(label, src_dir, dest_endpoint, dest_task_dir)
