import os
import shutil
import tempfile

from jaws_site import wfcopy

# Mockup folders and files generated by a cromwell workflow run, including nested subworkflows
cromwell_outputs = [
    "call-runBlastNoshard/blast.runblastplus/4a1/call-runBlast/execution/refseq.bacteria.parsed",
    "call-runBlastNoshard/blast.runblastplus/4a1/call-runBlast/runblastplus2/blast.runblastplus2/4b2/call-runBlast2/shard-0/execution/refseq.fungi.parsed", # noqa
    "call-runBlastNoshard/blast.runblastplus/4a1/call-runBlast/runblastplus2/blast.runblastplus2/4b2/call-runBlast2/shard-1/execution/refseq.archaea.parsed", # noqa
    "call-runBlastShard/shard-0/execution/refseq.bacteria.parsed",
    "call-runBlastShard/shard-1/execution/refseq.mito.parsed",
    "call-runSpades/execution/scaffolds.fasta",
]

# Cromwell files created in each task directory
cromwell_files = [
    "script",
    "script.background",
    "script.submit",
    "stdout",
    "stdout.background",
    "stderr",
    "stderr.background",
    "rc",
]

# Folders and files created by wfcopy
wfcopy_outputs = [
    "runBlastNoshard/refseq.bacteria.parsed",
    "runBlastNoshard/runBlast2-shard-0/refseq.fungi.parsed",
    "runBlastNoshard/runBlast2-shard-1/refseq.archaea.parsed",
    "runBlastShard/shard-0/refseq.bacteria.parsed",
    "runBlastShard/shard-1/refseq.mito.parsed",
    "runSpades/scaffolds.fasta",
    "log/runBlastNoshard-runBlast2-shard-0.script",
    "log/runBlastNoshard-runBlast2-shard-0.stderr",
    "log/runBlastNoshard-runBlast2-shard-0.stdout",
    "log/runBlastNoshard-runBlast2-shard-1.script",
    "log/runBlastNoshard-runBlast2-shard-1.stderr",
    "log/runBlastNoshard-runBlast2-shard-1.stdout",
    "log/runBlastNoshard.script",
    "log/runBlastNoshard.stderr",
    "log/runBlastNoshard.stdout",
    "log/runBlastShard-shard-0.script",
    "log/runBlastShard-shard-0.stderr",
    "log/runBlastShard-shard-0.stdout",
    "log/runBlastShard-shard-1.script",
    "log/runBlastShard-shard-1.stderr",
    "log/runBlastShard-shard-1.stdout",
    "log/runSpades.script",
    "log/runSpades.stderr",
    "log/runSpades.stdout",
    "log/workflow.rc",
]

# Folders and files created by wfcopy with flatten option
wfcopy_flatten_outputs = [
    "runBlastNoshard/refseq.bacteria.parsed",
    "runBlastNoshard/refseq.fungi.parsed",
    "runBlastNoshard/refseq.archaea.parsed",
    "runBlastShard/refseq.bacteria.parsed",
    "runBlastShard/refseq.mito.parsed",
    "runSpades/scaffolds.fasta",
    "log/runBlastNoshard-runBlast2-shard-0.script",
    "log/runBlastNoshard-runBlast2-shard-0.stderr",
    "log/runBlastNoshard-runBlast2-shard-0.stdout",
    "log/runBlastNoshard-runBlast2-shard-1.script",
    "log/runBlastNoshard-runBlast2-shard-1.stderr",
    "log/runBlastNoshard-runBlast2-shard-1.stdout",
    "log/runBlastNoshard.script",
    "log/runBlastNoshard.stderr",
    "log/runBlastNoshard.stdout",
    "log/runBlastShard-shard-0.script",
    "log/runBlastShard-shard-0.stderr",
    "log/runBlastShard-shard-0.stdout",
    "log/runBlastShard-shard-1.script",
    "log/runBlastShard-shard-1.stderr",
    "log/runBlastShard-shard-1.stdout",
    "log/runSpades.script",
    "log/runSpades.stderr",
    "log/runSpades.stdout",
    "log/workflow.rc",
]

# Cromwell files created in each task within the wfcopy dir
wfcopy_cromwell_files = [
    "script",
    "stdout",
    "stderr",
    "rc",
]

cromwell_root_dir = tempfile.mkdtemp(prefix="cromwell_")
wfcopy_root_dir = tempfile.mkdtemp(prefix="wfcopy_")


def setup():
    print("setup ...")
    for filename in cromwell_outputs:
        fullname = os.path.join(cromwell_root_dir, filename)
        filepath = os.path.dirname(fullname)

        # make cromwell dir
        if not os.path.isdir(filepath):
            os.makedirs(filepath)

        # add task file in cromwell dir
        with open(fullname, "w") as fh:
            fh.write("test")

        # add cromwell script files in cromwell dir
        for srcfile in cromwell_files:
            fullname = os.path.join(filepath, srcfile)
            with open(fullname, "w") as fh:
                fh.write("test")
            print(fullname)
        print(fullname)


def teardown():
    print("teardown ...")
    print("remove %s" % cromwell_root_dir)
    print("remove %s" % wfcopy_root_dir)
    shutil.rmtree(cromwell_root_dir)
    shutil.rmtree(wfcopy_root_dir)


def setup_function(setup):
    pass


def teardown_function(teardown):
    pass


def test_wfcopy():
    print("testing ...")
    # Transform cromwell dir to wfcopy format
    wfcopy.wfcopy(cromwell_root_dir, wfcopy_root_dir)

    # look for task files
    for filename in wfcopy_outputs:
        fullname = os.path.join(wfcopy_root_dir, filename)
        filepath = os.path.dirname(fullname)
        print(fullname)
        assert os.path.isfile(fullname)

        # look for cromwell script files
        if not filename.startswith("log"):
            for cromwell_file in wfcopy_cromwell_files:
                srcfile = os.path.join(filepath, cromwell_file)
                print(srcfile)
                assert os.path.isfile(srcfile)


def test_wfcopy_flatten():
    print("testing ...")
    # Transform cromwell dir to wfcopy format
    wfcopy.wfcopy(cromwell_root_dir, wfcopy_root_dir, flattenShardDir=True)

    # look for task files
    for filename in wfcopy_flatten_outputs:
        fullname = os.path.join(wfcopy_root_dir, filename)
        filepath = os.path.dirname(fullname)
        print(fullname)
        assert os.path.isfile(fullname)

        # look for cromwell script files
        if not filename.startswith("log"):
            for cromwell_file in wfcopy_cromwell_files:
                srcfile = os.path.join(filepath, cromwell_file)
                print(srcfile)
                assert os.path.isfile(srcfile)
