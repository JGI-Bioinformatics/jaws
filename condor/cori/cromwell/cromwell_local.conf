include required(classpath("application"))

webservice
{
  port = 50011
}

# JTM doesn't require this, but SLURM does:
system
{
  abort-jobs-on-terminate = true
  graceful-server-shutdown = true
  workflow-restart = false
  max-concurrent-workflows = 100000
  max-workflow-launch-count = 100000
  new-workflow-poll-rate = 1
  number-of-workflow-log-copy-workers = 20
  number-of-cache-read-workers = 50
  job-rate-control
  {
    jobs = 1
    per = 1 second
  }
}

workflow-options
{
  workflow-log-dir: "cromwell-workflow-logs"
  workflow-log-temporary: false
}

call-caching
{
  #enabled = true
  enabled = false
  invalidate-bad-cache-result = true
}

# this is required for shifter to find image from its registry.
docker {
    hash-lookup {
        enabled = false
    }
}

backend
{
  default = "Local"

  providers
  {

    Local
    {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

      config
      {

        concurrent-job-limit = 5
        run-in-background = true
        #temporary-directory = "`mktemp -d \"/global/cscratch1/sd/jaws/cromwell-tmp\"/tmp.XXXXXX`"

        # The list of possible runtime custom attributes.
        runtime-attributes = """
          String? docker
          String? docker_user

          Int? cpu = 1
          Float? memory_mb = 512.0
          Float? disk_kb = 25600.0
          Int? runtime_minutes
          String? nativeSpecs
          String? priority
        """

        # Submit string when there is no "docker" runtime attribute.
        #submit = "/usr/bin/env bash ${script}"
        submit = """
          export CONDOR_CONFIG="/global/cfs/projectdirs/jaws/condor/condor_config.worker.cori20"
          PATH="/global/cfs/projectdirs/jaws/condor/condor/bin":"/global/cfs/projectdirs/jaws/condor/condor/sbin":$PATH
          chmod 755 ${script}
          #FLAVOR=dynamic
          #printenv > env.debug
          cat > ${cwd}/execution/submitFile <<EOF
          PATH="/global/cfs/projectdirs/jaws/condor/condor/bin":"/global/cfs/projectdirs/jaws/condor/condor/sbin":$PATH
          Iwd=${cwd}/execution
          +Owner=UNDEFINED
          #requirements=${nativeSpecs}$FLAVOR
          #leave_in_queue=true
          request_memory=${memory_mb}
          #request_disk=${disk_kb}
          request_cpus=${cpu}
          #priority=${priority}
          error=${cwd}/execution/stderr
          output=${cwd}/execution/stdout
          log_xml=true
          executable=${script}
          log=${cwd}/execution/execution.log
          queue
          EOF
          condor_submit ${cwd}/execution/submitFile          
        """

        # Submit string when there is a "docker" runtime attribute.
        #submit-docker = "shifter --image=${docker} --volume=${cwd}:${docker_cwd} -- ${script}"
        submit-docker = """
          export CONDOR_CONFIG="/global/cfs/projectdirs/jaws/condor/condor_config.worker.cori20"
          PATH="/global/cfs/projectdirs/jaws/condor/condor/bin":"/global/cfs/projectdirs/jaws/condor/condor/sbin":$PATH
          out=$(shifterimg lookup ${docker} || shifterimg pull ${docker})
          ret=$?                    
          if [[ $ret != 0 || $(echo $out | grep "FAILURE") ]]; then
            echo "Invalid container name or failed to pull container, ${docker}!" >&2
            exit $ret
          else
            echo "Successfully pulled ${docker}!"
          fi
          chmod 755 ${script}
          #FLAVOR=$(/global/cfs/cdirs/m3408/aim2/cromwell2/get_flavor.sh ${cpu} ${memory_mb} ${runtime_minutes})
          #FLAVOR=dynamic
          #printenv > env.debug
          cat > ${cwd}/execution/dockerScript <<EOF
          #!/bin/bash
          #PATH=/global/common/software/m3408/cromwell:$PATH
          PATH="/global/cfs/projectdirs/jaws/condor/condor/bin":"/global/cfs/projectdirs/jaws/condor/condor/sbin":$PATH
          #cd /global/cscratch1/sd/nmdcda/
          #/global/cfs/cdirs/m3408/aim2/cromwell/shifter_exec.sh ${docker} ${job_shell} ${script}
          /global/cfs/projectdirs/jaws/jaws-install/jaws-prod/shifter_exec.sh ${docker} /global/dna/shared/databases/jaws/refdata /refdata ${job_shell} ${script}
          EOF
          chmod 755 ${cwd}/execution/dockerScript
          cat > ${cwd}/execution/submitFile <<EOF
          Iwd=${cwd}/execution
          +Owner=UNDEFINED
          #requirements=${nativeSpecs}$FLAVOR
          #leave_in_queue=true
          request_memory=${memory_mb}
          #request_disk=${disk_kb}
          request_cpus=${cpu}
          #priority=${priority}
          error=${cwd}/execution/stderr
          output=${cwd}/execution/stdout
          log_xml=true
          executable=${cwd}/execution/dockerScript
          log=${cwd}/execution/execution.log
          queue
          EOF
          condor_submit ${cwd}/execution/submitFile
       """

       kill = "condor_rm ${job_id}"
       check-alive = "condor_q ${job_id}"
       job-id-regex = "(?sm).*cluster (\\d+)..*" 


        #root = "/global/cscratch1/sd/jaws/cromwell-executions"
        #root = "/global/homes/s/sulsj/sulsj2/cromwell/cromwell-executions"
        root = "/global/homes/j/jaws_jtm/ssul/condor/cromwell/cromwell-executions"
        #dockerRoot = "/cromwell-executions"
        dockerRoot = "/global/homes/j/jaws_jtm/ssul/condor/cromwell/cromwell-executions"

        filesystems
        {
          local
          {
            localization: [ "soft-link", "copy" ]

            caching {
              duplication-strategy: [ "soft-link" ]
              hashing-strategy: "path"
            }
          }
        }

        default-runtime-attributes
        {
          failOnStderr: false
          continueOnReturnCode: 0
        }
      }
    }

#    SLURM
#    {
#      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
#      config
#      {
#        runtime-attributes = """
#        String time = "10:00"
#        Int cpus = 1
#        String mem = "6G"
#        """
#
#        submit = """
#            sbatch -J ${job_name} -D ${cwd} -o ${out} -e ${err} -t ${time} -c ${cpus} --mem=${mem} \
#            --wrap "/usr/bin/env bash ${script}"
#        """
#        kill = "scancel ${job_id}"
#        check-alive = "squeue -j ${job_id}"
#        job-id-regex = "Submitted batch job (\\d+).*"
#      }
#    }

    JTM
    {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config {
        runtime-attributes = """
        String time = "00:00:00"
        Int cpu = 1
        String mem = "0G"
    String cluster = "denovo"
    String poolname = "small"
    Int poolsize = 1
        String constraint = "haswell"
        """

        submit = "source ~/venv/bin/activate && jtm-submit -cr '/bin/bash ${script}' -cl ${cluster} -t ${time} -c ${cpu} -m ${mem} -p ${poolname} -s ${poolsize} -C ${constraint}"
        kill = "source ~/venv/bin/activate && jtm-kill ${job_id}"
        check-alive = "source ~/venv/bin/activate && jtm-isalive ${job_id}"
        job-id-regex = "JTM job ID (\\d+)"
      }
    }


  }
}
