=============
JAWS Commands
=============

.. role:: bash(code)
   :language: bash

.. warning::
   Before these commands will work, you need to set up everything:
   See `Quickstart Example <jaws_quickstart.html>`_ for full setup instructions.


Example submitting a workflow:

:bash:`jaws submit <wdl> <inputs json> <site>`

Usage: jaws [OPTIONS] COMMAND [ARGS]...
---------------------------------------
Run a command with --help to see it's options.

.. code-block:: text

    Options:
      --config TEXT     JAWS config file
      --user TEXT       User config file
      --log TEXT        Log file
      --log-level TEXT  Logging level [debug|info|warning|error|critical]
      -h, --help        Show this message and exit.

    Commands:
      add-user     Add new user and get JAWS OAuth access token (restricted).
      cancel       Cancel a run; prints whether aborting was successful or not.
      cancel-all   Cancel all active runs.
      errors       View error messages and stderr for failed Tasks.
    * get          Copy the output of a run to the specified folder.
      health       Current system status.
    * history      Print a list of the user's past runs.
      info         JAWS version and info.
      inputs       Generate inputs template (JSON) from workflow (WDL) file.
      list-sites   List available compute Sites
    * log          View the log of Run state transitions for the workflow as a...
      metadata     Print detailed metadata for a run, generated by cromwell.
      queue        List of user's current runs
    * status       Print the current status of a run.
    * submit       Submit a run for execution at a JAWS-Site.
    * task-log     Get log of each Task's state transitions.
    * task-status  Show the current status of each Task.
      validate     Validate a WDL using Cromwell's WOMTool.

The commands with an asterik have additional options. Expand the below commands to see them.


.. raw:: html

    <details>
    <summary style="color: #448ecf";>get</summary>

.. code-block:: text

    Usage: jaws get [OPTIONS] RUN_ID DEST

    Copy the output of a run to the specified folder.

    Options:
    --complete  Get complete cromwell output
    --quiet     Don't print copy progress bar
    -h, --help  Show this message and exit.

.. raw:: html

    </details>

.. raw:: html

    <details>
    <summary style="color: #448ecf";>history</summary>

.. code-block:: text

    Usage: jaws history [OPTIONS]

    Print a list of the user's past runs.

    Options:
    --days INTEGER  history going back this many days; default=1
    --site TEXT     limit results to this compute-site; default=all
    --result TEXT   limit results to this result; default=any
    -h, --help      Show this message and exit.

.. raw:: html

    </details>

    <details>
    <summary style="color: #448ecf";>log</summary>
    
.. code-block:: text

    Usage: jaws log [OPTIONS] RUN_ID

    View the log of Run state transitions for the workflow as a whole.

    Options:
    --fmt TEXT  the desired output format: [text|json|tab]
    -h, --help  Show this message and exit.

.. raw:: html

    </details>

    <details>
    <summary style="color: #448ecf";>status</summary>
    
.. code-block:: text

    Usage: jaws status [OPTIONS] RUN_ID

    Print the current status of a run.

    Options:
    --verbose   Return all fields
    -h, --help  Show this message and exit.

.. raw:: html

    </details>

    <details>
    <summary style="color: #448ecf";>submit</summary>
    
.. code-block:: text

    Usage: jaws submit [OPTIONS] WDL_FILE JSON_FILE SITE

    Submit a run for execution at a JAWS-Site. Available sites can be found by
    running 'jaws run list-sites'.

    Options:
    --tag TEXT  identifier for the run
    --no-cache  Disable call-caching for this run
    --quiet     Don't print copy progress bar
    -h, --help  Show this message and exit.

.. raw:: html

    </details>

    <details>
    <summary style="color: #448ecf";>task-log</summary>
    
.. code-block:: text

    Usage: jaws task-log [OPTIONS] RUN_ID

    Get log of each Task's state transitions.

    Options:
    --fmt TEXT  the desired output format: [text|json]
    -h, --help  Show this message and exit.

.. raw:: html

    </details>

.. raw:: html
 
    <details>
    <summary style="color: #448ecf";>task-status</summary>

.. code-block:: text

    Usage: jaws task-status [OPTIONS] RUN_ID

    Show the current status of each Task.

    Options:
    --fmt TEXT  the desired output format: [text|json]
    -h, --help  Show this message and exit.

.. raw:: html

    </details>

Examples
--------

**See status of the JAWS services**

.. code-block:: text

    jaws health

    {
    "CORI-Cromwell": "UP",
    "CORI-RMQ": "UP",
    "CORI-Site": "UP",
    "JAWS-Central": "UP",
    "JGI-Cromwell": "UP",
    "JGI-RMQ": "UP",
    "JGI-Site": "UP",
    "TAHOMA-Cromwell": "UP",
    "TAHOMA-RMQ": "UP",
    "TAHOMA-Site": "UP"
    }




**To run a wdl**

One of the two required files is an inputs(json) file. You can generate one from scratch by running :bash:`jaws inputs <WDL>` which will print out a template based on the WDL, you just need to fill out the values.

A simple example template would look like:

.. code-block:: text

    {
      "fq_count.fastq_file": "File"
    }

To submit a run

.. code-block:: text

  jaws submit my.wdl my.json cori

  # output looks like
  {
    "max_ram_gb": 10,
    "run_id": 7235,
    "site_id": "CORI",
    "status": "uploading",
    "tag": ""
  }

Include a tag for your run to help keep track of things. :bash:`jaws status` will display the tag.

.. code-block:: text

  jaws submit --tag 'some useful info' my.wdl my.json cori

Run with Cromwell's call-caching off. Call-caching will allow you to re-run JAWS submissions without re-running tasks that completed successfully. However, this is not always desirable and you can turn caching off.

.. code-block:: text

  jaws submit --no-cache my.wdl my.json cori


**Monitor your Run**

The examples are in order of verbosity.

.. code-block:: text

  # overview of the whole WDL
  jaws status 7235

  or

  # the times each stage started, e.g. queued, running, etc.
  jaws log 7235

  or

  # the status of each task is displayed
  jaws task-status 7235

  or

  # the times each task entered each stage 
  jaws task-log 7235


**Understanding the Stages**

These are the possible states, in order, that a JAWS run passes through. 

.. code-block:: text

   uploading:           Your run inputs are being sent to the compute site via Globus.
   upload failed:       The Globus transfer of your run to the compute-site failed.
   upload inactive:     Globus transfer stalled.
   upload complete:     Your run inputs have been transferred and are ready to submit to Cromwell.
   missing input:       The run was uploaded but some of the required files were missing.
   submitted:           The run has been submitted to Cromwell and tasks should start to queue within moments.
   submission failed:   The run was submitted to Cromwell but rejected due to invalid input.
   queued:              At least one task has requested resources but no tasks have started running yet.
   running:             The run is being executed by Cromwell; you can check `task-status` for more detail.
   succeeded:           Cromwell has completed successfully and is waiting for the output to be downloaded.
   failed:              The run has failed; see: `errors` and `metadata` for more detail.
   aborting:            Your run is in the process of being canceled.
   aborted:             The run was cancelled.
   downloading:         The run output is being sent via Globus.
   download failed:     Globus failed to return the results to the user.
   download inactive:   Globus transfer stalled.
   download complete:   The run output, whether succeeded or failed, has been returned to the user.



**Get current or old history of jobs owned by you**

.. code-block:: text

   # get list of your currently running jobs
   jaws queue
   
   # view history of your jobs for last 7 days
   jaws history

   There are options to use with history
   --days <number of days to include>
   --result [succeeded, failed]
   --site [jgi|cori] (see jaws list-sites)


**Debugging**

:bash:`jaws errors` is a catch-all command for viewing errors.

This command should capture errors from

1. cromwell 
2. the WDL tasks
3. JTM backend
4. Slurm

You can see these same errors when running other commands like 

.. code-block:: text

    # Some errors are generated by the backend (i.e. JTM) like timeout errors & bad docker image names.
    # You can see these with the task-log command
    jaws task-log 7235

.. code-block:: text

    # metadata shows cromwell server log
    jaws metadata 7235


.. note::
    Cromwell will created a stderr, stdout, script and script.submit file for each task. These are handy for debugging. See the next section to find these files.


**Getting your output**

The preferable way to get your results is by using the "get" command.  The benifits of this method is that you can opt to not copy many of the temp files but only copy the files that you've listed in the :bash:`outputs` section in the main section of the WDL. If you want everything in the :bash:`execution` directory, then use the --complete flag.  Remember, if you don't get your files, they will be subject to the scheduled purge of the staging directory.

Note that the :bash:`--complete` flag will also give you your original main.wdl, the inputs.json, and a zip file of any sub-wdls you may of had.

.. code-block:: text

    jaws get 7235 myresults
	or
    jaws get 7235 --complete myresults

The second way to find your results would be to run the status command and look for the path for :bash:`output_dir`.  However, this path only should exist on the SITE that you ran on.  The results should include all raw cromwell output.

The input files will also be in this output_dir, and thus uneccessarily copied over if you chose to use this path.

.. code-block:: text

    jaws status --verbose 7235 | grep output_dir

    "output_dir": "/global/cfs/projectdirs/jaws/data-repository-prod/jfroula/CORI/7235",


**Specialty Commands**

This command uses the womtool.jar (developed by same people as cromwell.jar) as a linter for your WDLs. You would use this when developing a WDL.

.. code-block:: text

    jaws validate my.wdl


The --user flag allows someone to use a different jaws token than the default. This way, you can have a token representing a user like 'rqc' or 'jaws-admin' with certain permissions. Then multiple people from a group can use this token to have access to certain files.
.. code-block:: text

    jaws --user <~/jaws.conf> <some command>
