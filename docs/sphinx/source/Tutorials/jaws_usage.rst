======================== 
How to Run a WDL in JAWS
========================

.. role:: bash(code)
   :language: bash

.. warning::
   Before these commands will work, you need to set up everything:
   See `Quickstart Example <jaws_quickstart.html>`_ for full setup instructions.


Example submitting a workflow:

:bash:`jaws submit <wdl> <inputs json> <site>` 


*************
JAWS commands
*************

Usage: jaws [OPTIONS] COMMAND [ARGS]...
---------------------------------------
Run a command with --help to see it's options.

.. code-block:: text
    
    Options:
      --config TEXT     JAWS config file
      --user TEXT       User config file
      --log TEXT        Log file
      --log-level TEXT  Logging level [debug|info|warning|error|critical]
      -h, --help        Show this message and exit.
    
    Commands:
      add-user     Add new user and get JAWS OAuth access token (restricted).
      cancel       Cancel a run; prints whether aborting was successful or not.
      cancel-all   Cancel all active runs.
      errors       View error messages and stderr for failed Tasks.
      get          Copy the output of a run to the specified folder.
      health       Current system status.
    * history      Print a list of the user's past runs.
      info         JAWS version and info.
      inputs       Generate inputs template (JSON) from workflow (WDL) file.
      list-sites   List available compute Sites
    * log          View the log of Run state transitions for the workflow as a...
      metadata     Print detailed metadata for a run, generated by cromwell.
      queue        List of user's current runs
    * status       Print the current status of a run.
    * submit       Submit a run for execution at a JAWS-Site.
    * task-log     Get log of each Task's state transitions.
    * task-status  Show the current status of each Task.
      validate     Validate a WDL using Cromwell's WOMTool.
    * wfcopy       Simplify Cromwell output.

The commands with an asterik have additional options. Expand the below commands to see them.

.. raw:: html
 
    <details>
    <summary style="color: #448ecf";>history</summary>
    
.. code-block:: text

    Usage: jaws history [OPTIONS]

    Print a list of the user's past runs.

    Options:
    --days INTEGER  history going back this many days; default=1
    --site TEXT     limit results to this compute-site; default=all
    --result TEXT   limit results to this result; default=any
    -h, --help      Show this message and exit.

.. raw:: html

    </details>

    <details>
    <summary style="color: #448ecf";>log</summary>
    
.. code-block:: text

    Usage: jaws log [OPTIONS] RUN_ID

    View the log of Run state transitions for the workflow as a whole.

    Options:
    --fmt TEXT  the desired output format: [text|json|tab]
    -h, --help  Show this message and exit.

.. raw:: html

    </details>

    <details>
    <summary style="color: #448ecf";>status</summary>
    
.. code-block:: text

    Usage: jaws status [OPTIONS] RUN_ID

    Print the current status of a run.

    Options:
    --verbose   Return all fields
    -h, --help  Show this message and exit.

.. raw:: html

    </details>

    <details>
    <summary style="color: #448ecf";>submit</summary>
    
.. code-block:: text

    Usage: jaws submit [OPTIONS] WDL_FILE JSON_FILE SITE

    Submit a run for execution at a JAWS-Site. Available sites can be found by
    running 'jaws run list-sites'.

    Options:
    --tag TEXT  identifier for the run
    --no-cache  Disable call-caching for this run
    -h, --help  Show this message and exit.

.. raw:: html

    </details>

    <details>
    <summary style="color: #448ecf";>task-log</summary>
    
.. code-block:: text

    Usage: jaws task-log [OPTIONS] RUN_ID

    Get log of each Task's state transitions.

    Options:
    --fmt TEXT  the desired output format: [text|json]
    -h, --help  Show this message and exit.

.. raw:: html

    </details>

.. raw:: html
 
    <details>
    <summary style="color: #448ecf";>task-status</summary>

.. code-block:: text

    Usage: jaws task-status [OPTIONS] RUN_ID

    Show the current status of each Task.

    Options:
    --fmt TEXT  the desired output format: [text|json]
    -h, --help  Show this message and exit.

.. raw:: html

    </details>

    <details>
    <summary style="color: #448ecf";>wfcopy</summary>

.. code-block:: text

    Usage: jaws history [OPTIONS]

    Print a list of the user's past runs.

    Options:
    --days INTEGER  history going back this many days; default=1
    --site TEXT     limit results to this compute-site; default=all
    --result TEXT   limit results to this result; default=any
    -h, --help      Show this message and exit.

.. raw:: html

    </details>

|

Examples
--------

**See status of the JAWS services**

.. code-block:: text

    jaws health

    {
      "JAWS-Central": "UP",
      "JGI-Cromwell": "UP",
      "JGI-RMQ": "UP",
      "JGI-Site": "UP",
      "CORI-Cromwell": "UP",
      "CORI-RMQ": "UP",
      "CORI-Site": "UP"
    }




**To run a wdl**

One of the two required files is an inputs(json) file. You can generate one from scratch by running :bash:`jaws inputs <WDL>` which will print out a template based on the WDL, you just need to fill out the values.

A simple example template would look like:

.. code-block:: text

    {
      "fq_count.fastq_file": "File"
    }

To submit a run

.. code-block:: text

  jaws submit my.wdl my.json cori

  # output looks like
  {
    "max_ram_gb": 10,
    "run_id": 7235,
    "site_id": "CORI",
    "status": "uploading",
    "tag": ""
  }

Include a tag for your run to help keep track of things. :bash:`jaws status` will display the tag.

.. code-block:: text

  jaws submit --tag 'some useful info' my.wdl my.json cori


Run with Cromwell's call-caching off. Call-caching will allow you to re-run JAWS submissions without re-running tasks that completed successfully. However, this is not always desirable and you can turn caching off.

.. code-block:: text

  jaws submit --no-cache my.wdl my.json cori


**Monitor your Run**

The examples are in order of verbosity.

.. code-block:: text

  # overview of the whole WDL
  jaws status 7235

  or

  # the times each stage started, e.g. queued, running, etc.
  jaws log 7235

  or

  # the status of each task is displayed
  jaws task-status 7235

  or

  # the times each task entered each stage 
  jaws task-log 7235


**Understanding the Stages**

These are the possible states, in order, that a JAWS run passes through. 

.. code-block:: text

   uploading            # input data are being copied to scratch by Globus
   missing input        # run was uploaded but some of the required files were missing
   upload complete      # Globus finished copying all your files to scratch
   submitted            # job submitted to JTM and worker pools have been requested
   queued               # waiting for worker pools to be reserved from cluster
   running              # the run is being executed by Cromwell
   succeeded            # Cromwell completed the run but results need to be transfered
   ready                # results are ready for Globus transfer off of site scratch
   downloading          # results are being copied by Globus
   download complete    # results have been copied to your output directory. signifies end of run
   failed               # runing error from either jaws or user's wdl
   canceled             # run was cancelled by user or JTM issue


**Get current or old history of jobs owned by you**

.. code-block:: text

   # get list of your currently running jobs
   jaws queue                                      
   
   # view history of your jobs for last 7 days 
   jaws history 

   There are options to use with history
   --days <number of days to include>
   --result [succeeded, failed]
   --site [jgi|cori] (see jaws list-sites)


**Debugging**

:bash:`jaws errors` is a catch-all command for viewing errors.

This command should capture errors from

1. cromwell 
2. the WDL tasks
3. JTM backend
4. Slurm

You can see these same errors when running other commands like 

.. code-block:: text

    # Some errors are generated by the backend (i.e. JTM) like timeout errors & bad docker image names.
    # You can see these with the task-log command
    jaws task-log 7235

.. code-block:: text

    # metadata shows cromwell server log
    jaws metadata 7235


.. note::
    Cromwell will created a stderr, stdout, script and script.submit file for each task. These are handy for debugging. See the next section to find these files.


**Getting your output**

The preferable way to get your results is by using the "get" command.  The benifits of this method is that many of the temp files are not copied, only the files in the :bash:`execution` directory are copied. Also, you don't have to worry about loosing your results due to the scheduled purge of the staging directory.

.. code-block:: text

    jaws get 7235 myresults

As alluded to above, JAWS will save your output to a staging directory that is owned by JAWS. You should have read permissions to these files which are in a path called output_dir and is displayed with the :bash:`jaws status --verbose 7235` command.  This directory represents the raw output from Cromwell and includes all the temp files like :bash:`inputs` folder. Note that the path only exists on the :bash:`site` that you submitted to, i.e. jgi or cori.

.. code-block:: text

    jaws status --verbose 7235
    

**Specialty Commands**

This command uses the womtool.jar (developed by same people as cromwell.jar) as a linter for your WDLs. You would use this when developing a WDL.

.. code-block:: text

    jaws validate my.wdl


The --user flag allows someone to use a different jaws token than the default. This way, you can have a token representing a user like 'rqc' or 'jaws-admin' with certain permissions. Then multiple people from a group can use this token to have access to certain files.
.. code-block:: text

    jaws --user <~/jaws.conf> <some command>
