#!/usr/bin/env python

import os
import sys
import requests
import time
from prometheus_client import start_http_server, Gauge

def get_services():
    services = {
        'jaws_central_prod': {
            'func': get_request,
            'params': 'http://jaws.lbl.gov:5003/api/v2/status',
        },
        'jaws_central_staging': {
            'func': get_request,
            'params': 'http://jaws.lbl.gov:5002/api/v2/status',
        },
        'cromwell_prod': {
            'func': get_request,
            'params': 'http://cori20.nersc.gov:50103/engine/v1/status',
        },
        'cromwell_staging': {
            'func': get_request,
            'params': 'http://cori20.nersc.gov:50102/engine/v1/status'
        }
    }
    return services


def create_proms(urls):
    # Register and create prometheus objects for each service to store metrics.
    proms = {}
    for name in urls:
        proms[name] = Gauge(name, f"Monitor JAWS {name}")
    return proms


def get_request(*args, **rkwargs):
    if not len(args) == 1:
        raise SystemExit("Missing url parameter when calling get_request()")
    url = args[0]

    try:
        r = requests.get(url=url, **rkwargs)
    except Exception:
        return 0
    return 1 if r.status_code == 200 else 0


def process_request(services, proms, t=30):
    for name in services:
        func = services[name].get('func')
        if not func:
            raise SystemExit("Missing func key in services dict")

        params = services[name].get('params')
        status = func(params)
        print(name, func, params, status)
        prom = proms[name]
        prom.set(status)

    time.sleep(t)


def main():
    start_http_server(8000)
    services = get_services()
    proms = create_proms(services)
    while True:
        process_request(services, proms)


if __name__ == '__main__':
    main()
